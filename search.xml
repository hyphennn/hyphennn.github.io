<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go GC 调优思路</title>
    <url>/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h1 id="面向高性能的-Go-GC-调优思路"><a href="#面向高性能的-Go-GC-调优思路" class="headerlink" title="面向高性能的 Go GC 调优思路"></a>面向高性能的 Go GC 调优思路</h1><h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><p>最简单的优化思路是别浪费时间优化了，转 Rust，R 门！</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>FG 是一个纯内存计算服务，其特点是：核心数据使用 map 存储，请求到达服务后，查询 map，进行计算并返回。服务拉起时启动一个协程定时从 DB 获取数据刷新此 map。</p>
<p>计算逻辑已被优化到几乎最佳，当前最大的性能瓶颈是 GC，由于 map 中存储了大量 k-v 对，且 value 是个复杂结构体，会逃逸到堆上，导致堆上存在大量可达的存活对象， GC Pause 较长，平均在几 ms 到几百 ms，且出现过 GC Pause 超过 1s 的极端场景。这带来的后果是：单实例吞吐量降低，时延优化受阻，毛刺多。</p>
<p>特点：高并发，核心读接口QPS100w+，单实例（16C32G） QPS 5k+，低时延：要求核心读接口 P99&lt;1ms。</p>
<p>目标：优化 GC，降低 GC Pause</p>
<p>此方案存在很多针对 FG 服务特性的特化，但是 GC 逃逸、堆栈分析等思路是共通的。</p>
<h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>使用 Pprof，查看火焰图以及堆使用情况，发现问题根源是堆上的大量存活对象，导致了：</p>
<ul>
<li>GC 标记阶段，待标记对象多，并行标记的线程占用大量 CPU 资源。</li>
<li>GC 清理阶段，待清理对象多，STW 时间增长。</li>
</ul>
<h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>将 map 分为读写两个 map，并在完成数据刷新后交换。这意味着任何时刻，内存中都存在一个只读的 map 和一个只写的 map，从而不再需要保障并发安全，因为写是单协程的。</p>
<p>这么做的另外一个好处是，方便牺牲写 map 的性能，来换取更好的堆分配和更好的读性能。</p>
<h2 id="堆栈与内联分析"><a href="#堆栈与内联分析" class="headerlink" title="堆栈与内联分析"></a>堆栈与内联分析</h2><ul>
<li>写场景避免堆分配<ul>
<li>在写场景，case by case 的分析传值是否会产生堆逃逸，尽可能的减少逃逸到堆上的对象，最直观的方式是：尽可能使用值传递，尽管会产生复制的性能损耗，但是写 map 的性能变差是可接受的；此外，在某些场景下，可以牺牲代码可读性来减少函数调用，如明确不会内联的场景，会在传递值代价很大的情况下，取消函数调用，直接合并到调用函数内。</li>
</ul>
</li>
<li>读场景避免值复制<ul>
<li>在读场景，策略则和写场景相反，读场景会尽量使用指针传递，降低值复制的代价。不过内联策略则是一致的。</li>
</ul>
</li>
<li>内联优化<ul>
<li>我们配置了 -gcflag&#x3D;’-l -l’，牺牲二进制文件的大小来换取更多的内联函数，从而减少值在栈上的传递甚至逃逸到堆上。</li>
</ul>
</li>
</ul>
<h2 id="GC-逃逸"><a href="#GC-逃逸" class="headerlink" title="GC 逃逸"></a>GC 逃逸</h2><p>前述的优化只是在尽可能减少堆上的对象，但此服务的对象多数都来自 map 中的数十万的 k-v 对，因此最大的瓶颈是如何优化 map。</p>
<p>很显然，这两个 map 以及其中的对象大部分都是长期不变的，之前见过另外一个 Java 服务有类似场景，他们的思路是通过 UNSAFE 修改对象头，在初始化对象的时候直接将其存活代数改为 15，从而不需要经过 ygc 直接分配到老年代。</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateObjAge</span><span class="params">(Object obj, <span class="type">int</span> age)</span> &#123; </span><br><span class="line">  <span class="keyword">if</span>(!toUpdateAgeReady || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="type">Long</span> <span class="variable">mark</span> <span class="operator">=</span> UNSAFE.getLong(obj, <span class="number">0L</span>);</span><br><span class="line">  <span class="type">long</span> <span class="variable">result</span> <span class="operator">=</span> mark &amp; AGE_64_MASK | ((<span class="type">long</span>)(age &amp; <span class="number">0xF</span>)) &lt;&lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">  UNSAFE.putLong(obj, <span class="number">0L</span>, result); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然而 Go 没有分代 GC，但一个类似的思路是：能否让这些对象对 Runtime 不可见，从而避开 GC？虽然可能会内存泄露，但是只要手动管理好这些内存，收益会是很可观的。</p>
<p>基于此，我们的想法便很清晰了：如何在 Go 中做到 GC 逃逸？Arena 似乎可行，但它现在还是实验特性，并且 Proposal 被无限期搁置了。但 Arena 的思想我们可以偷一下，于是便有了这个思路。</p>
<h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><p>在服务拉起时，绕开语言 API，使用内核 API sys_mmap 直接向 OS 申请内存，自行管理此内存。</p>
<p>优势：这一片内存是根对象不可达的，Go Runtime 检测不到这一片内存，标记和清理压力会大幅降低。</p>
<p>劣势：需要手动管理内存。</p>
<h3 id="gcescape"><a href="#gcescape" class="headerlink" title="gcescape"></a>gcescape</h3><p><a class="link"   href="https://github.com/hyphennn/gcescape" >https://github.com/hyphennn/gcescape<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>广告时间：强烈推荐，一个超快的 go collection 库，可以帮助你超大幅度的降低 gc 时间，超过 99%！</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>弃用标准库 map，自行实现 GCEscapeMap，使用 GCEscapeMap 作为核心数据的存储。</p>
<p>核心数据结构：</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> GCEscapeMap[T any] <span class="keyword">struct</span> &#123;</span><br><span class="line">	s       []T</span><br><span class="line">	realCap <span class="type">int</span></span><br><span class="line">	realLen <span class="type">int</span></span><br><span class="line">	idxMap  <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>核心方法：向内核申请内存</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">makeSlice</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(<span class="built_in">len</span> <span class="type">int</span>)</span></span> reflect.SliceHeader &#123;</span><br><span class="line">	fd := <span class="number">-1</span></span><br><span class="line">	<span class="keyword">var</span> t T</span><br><span class="line">	data, _, errno := syscall.Syscall6(</span><br><span class="line">		syscall.SYS_MMAP,</span><br><span class="line">		<span class="number">0</span>, <span class="comment">// address</span></span><br><span class="line">		<span class="type">uintptr</span>(<span class="built_in">len</span>)*unsafe.Sizeof(t),</span><br><span class="line">		syscall.PROT_READ|syscall.PROT_WRITE,</span><br><span class="line">		syscall.MAP_ANON|syscall.MAP_PRIVATE,</span><br><span class="line">		<span class="type">uintptr</span>(fd), <span class="comment">// No file descriptor</span></span><br><span class="line">		<span class="number">0</span>,           <span class="comment">// offset</span></span><br><span class="line">	)</span><br><span class="line">	<span class="keyword">if</span> errno != <span class="number">0</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(errno)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> reflect.SliceHeader&#123;</span><br><span class="line">		Data: data,</span><br><span class="line">		Len:  <span class="built_in">len</span>,</span><br><span class="line">		Cap:  <span class="built_in">len</span>,</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>基于申请的内存初始化 GCEscapeMap</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化 GCEscapeMap</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewGCEscapeMap</span>[<span class="title">T</span> <span class="title">any</span>]<span class="params">(<span class="built_in">cap</span> <span class="type">int</span>)</span></span> *GCEscapeMap[T] &#123;</span><br><span class="line">	<span class="keyword">var</span> t T</span><br><span class="line">	<span class="keyword">if</span> reflect.TypeOf(t).Kind() == reflect.Pointer &#123;</span><br><span class="line">		<span class="built_in">panic</span>(<span class="string">&quot;no ptr allowed&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	data := makeSlice[T](<span class="built_in">cap</span>)</span><br><span class="line">	s := *(*[]T)(unsafe.Pointer(&amp;data))</span><br><span class="line">	<span class="keyword">return</span> &amp;GCEscapeMap[T]&#123;s: s, realCap: <span class="built_in">cap</span>, realLen: <span class="number">0</span>, idxMap: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">int</span>, <span class="built_in">cap</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>读&amp;写 map</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *GCEscapeMap[T])</span></span> Push(k <span class="type">int</span>, v T) &#123;</span><br><span class="line">	idx, ok := e.idxMap[k]</span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		e.s[idx] = v</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		e.s[e.realLen] = v</span><br><span class="line">		e.realLen++</span><br><span class="line">		e.CheckAndScale()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *GCEscapeMap[T])</span></span> Get(k <span class="type">int</span>) (*T, <span class="type">bool</span>) &#123;</span><br><span class="line">	idx, ok := e.idxMap[k]</span><br><span class="line">	<span class="keyword">if</span> ok &#123;</span><br><span class="line">		<span class="keyword">return</span> &amp;e.s[idx], <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>e.CheckAndScale(): 此方法用于检测 realLen 和 realCap 的比值，在超过「安全阈值」时会开始告警，在超过「扩容阈值」时会开始主动扩容并告警，其原理和 Slice 一致，如果主动扩容失败，将中止读写 map 交换并告警。其中会存在大量业务和告警代码，因此不写了。 </p>
<p>需要指出的是，主动扩容是非常危险、代价非常高的操作，因此我们需要尽可能避免其出现：关注实例内存用量；关注 GCEscapeMap 当前用量。</p>
<h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>GCEscapeMap 包含以下成员：</p>
<ul>
<li>s 是数据真实存储的位置，由于其是直接向 OS 申请的，因此不会被 Runtime 扫描到。</li>
<li>realCap 和 realLen 用于控制 s 来实现类似 slice 的功能，因为 s 实际是定长的。</li>
<li>idxMap 是用于实现 map 能力的，其 k,v 都是 int，因此会被 Runtime 忽略（Go 1.5 开始提供此特性：<a class="link"   href="https://go-review.googlesource.com/c/go/+/3288%EF%BC%89" >https://go-review.googlesource.com/c/go/+/3288）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>我们使用 benchmark 来检验性能，并使用 Pprof 来观察堆情况</p>
<p>benchmark：</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkEmap</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	m := emap.NewGCEscapeMap(<span class="number">2000000</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">		m.Push(i, TestAim&#123;</span><br><span class="line">			Str:    <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Map:    <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;1&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">			Value:  <span class="number">0</span>,</span><br><span class="line">			Str2:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str3:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str4:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str5:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str6:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str7:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str8:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Value2: <span class="number">0</span>,</span><br><span class="line">			Value3: <span class="number">0</span>,</span><br><span class="line">			Value4: <span class="number">0</span>,</span><br><span class="line">			Value5: <span class="number">0</span>,</span><br><span class="line">			Value6: <span class="number">0</span>,</span><br><span class="line">			Value7: <span class="number">0</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		m.Get(i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">BenchmarkNormalMap</span><span class="params">(b *testing.B)</span></span> &#123;</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]emap.Aim, <span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">		m[i] = TestAim&#123;</span><br><span class="line">			Str:    <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Map:    <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;1&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">			Value:  <span class="number">0</span>,</span><br><span class="line">			Str2:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str3:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str4:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str5:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str6:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str7:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str8:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Value2: <span class="number">0</span>,</span><br><span class="line">			Value3: <span class="number">0</span>,</span><br><span class="line">			Value4: <span class="number">0</span>,</span><br><span class="line">			Value5: <span class="number">0</span>,</span><br><span class="line">			Value6: <span class="number">0</span>,</span><br><span class="line">			Value7: <span class="number">0</span>,</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; b.N; i++ &#123;</span><br><span class="line">		_ = m[i]</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/img.png"
                      class="" title="Benchmark 结果"
                >

<p>Pprof</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;net/http&quot;</span></span><br><span class="line">	_ <span class="string">&quot;net/http/pprof&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		http.ListenAndServe(<span class="string">&quot;0.0.0.0:8080&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">	&#125;()</span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">	UseGCEscapeMap()</span><br><span class="line">	<span class="comment">//UseNormalMap()</span></span><br><span class="line">	time.Sleep(<span class="number">1000</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UseGCEscapeMap</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := emap.NewGCEscapeMap[TestAim](<span class="number">2000000</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">		m.Push(i, TestAim&#123;</span><br><span class="line">			Str:    <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Map:    <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;1&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">			Value:  <span class="number">0</span>,</span><br><span class="line">			Str2:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str3:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str4:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str5:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str6:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str7:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str8:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Value2: <span class="number">0</span>,</span><br><span class="line">			Value3: <span class="number">0</span>,</span><br><span class="line">			Value4: <span class="number">0</span>,</span><br><span class="line">			Value5: <span class="number">0</span>,</span><br><span class="line">			Value6: <span class="number">0</span>,</span><br><span class="line">			Value7: <span class="number">0</span>,</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		st := time.Now()</span><br><span class="line">		runtime.GC()</span><br><span class="line">		fmt.Printf(<span class="string">&quot;GC took %s\n&quot;</span>, time.Since(st))</span><br><span class="line">		time.Sleep(time.Second)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	runtime.KeepAlive(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UseNormalMap</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]TestAim, <span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">		m[i] = TestAim&#123;</span><br><span class="line">			Str:    <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Map:    <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;1&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;,</span><br><span class="line">			Value:  <span class="number">0</span>,</span><br><span class="line">			Str2:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str3:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str4:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str5:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str6:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str7:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Str8:   <span class="string">&quot;1&quot;</span>,</span><br><span class="line">			Value2: <span class="number">0</span>,</span><br><span class="line">			Value3: <span class="number">0</span>,</span><br><span class="line">			Value4: <span class="number">0</span>,</span><br><span class="line">			Value5: <span class="number">0</span>,</span><br><span class="line">			Value6: <span class="number">0</span>,</span><br><span class="line">			Value7: <span class="number">0</span>,</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		st := time.Now()</span><br><span class="line">		runtime.GC()</span><br><span class="line">		fmt.Printf(<span class="string">&quot;GC took %s\n&quot;</span>, time.Since(st))</span><br><span class="line">		time.Sleep(time.Second)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	runtime.KeepAlive(m)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>UseGCEscapeMap：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/stdout-em.png"
                      class="" title="UseGCEscapeMap输出结果"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/heap-status-em.png"
                      class="" title="UseGCEscapeMap堆状态"
                >

<p>UseNormalMap:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/stdout-nm.png"
                      class="" title="UseNormalMap输出结果"
                >
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/heap-status-nm.png"
                      class="" title="UseNormalMap堆状态"
                >]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title>End&amp;Start</title>
    <url>/2024/02/23/End-Start/</url>
    <content><![CDATA[<h1 id="End-Start"><a href="#End-Start" class="headerlink" title="End&amp;Start"></a>End&amp;Start</h1><p>立个 flag：这个周末写点东西～</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
  </entry>
  <entry>
    <title>Bazel-Next Generation of Build?</title>
    <url>/2024/04/22/bazel-1/</url>
    <content><![CDATA[<h1 id="Bazel-Next-Generation-of-Build"><a href="#Bazel-Next-Generation-of-Build" class="headerlink" title="Bazel: Next Generation of Build?"></a>Bazel: Next Generation of Build?</h1><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>Bazel 是 Google 开源的一款与 Make、Maven 和 Gradle 类似的开源构建和测试工具， 它使用人类可读的高级构建语言 Starlark，支持多种语言，可为多个平台构建输出。 Bazel 支持任意大小的构建目标，并支持跨多个代码库和大量用户的大型代码库，是 Google 主推的一种构建工具。</p>
<h3 id="Bazel-与其他构建工具的区别"><a href="#Bazel-与其他构建工具的区别" class="headerlink" title="Bazel 与其他构建工具的区别"></a>Bazel 与其他构建工具的区别</h3><ul>
<li>基于任务（task）的构建系统</li>
</ul>
<p>在基于任务的构建系统中，基本的工作单元是任务。每个任务都是可以执行任何类型的逻辑的脚本，而任务将其他任务指定为必须在其之前运行的依赖项。目前使用的主要大多数构建系统（例如 Ant、Maven、Gradle）都基于任务。</p>
<p>基于任务的构建系统往往都会面临一个问题：程序员的权力过大。因为脚本能执行的动作太丰富，构建系统本身完全不知道脚本在做什么，所以它必须在如何规划和执行构建步骤时非常保守，从而导致性能很差。此外，系统也没有办法确认每个脚本的确在做以及正确完成它声称要完成的工作，因此系统往往会变得非常复杂。这就产生了两个问题：难以并发。因为系统无法了解脚本是否并发安全，因此往往采用串行的方案。难以增量构建。</p>
<ul>
<li>基于制品（Artifact）的构建工具</li>
</ul>
<p>基于制品的构建工具采用了完全不一样的逻辑，在这样的系统中，程序员的权力被大幅缩减，「任务」转为由构建系统制定，程序员可以对任务做有限的配置，但不能决定任务何时执行、如何执行。程序员只能指定「依赖项」和「构建目标」，由构建系统决定如何执行构建。</p>
<p>具体到 Bazel 来说，Bazel 提供了一系列「rule」，这些 rule 既可以是官方团队维护的又有可以是第三方维护的。程序员在使用 Bazel 时，只需要指定所使用的 rule，构建目标以及依赖项；Bazel 将自动解析依赖关系，并尽可能以最高效率来完成构建。</p>
<h3 id="Why-Bazel？"><a href="#Why-Bazel？" class="headerlink" title="Why Bazel？"></a>Why Bazel？</h3><ul>
<li>fast &amp; correct</li>
<li>高扩展性，多语言支持</li>
<li>对大仓友好</li>
<li>限制程序员的权力</li>
</ul>
<h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>当用户告诉 Bazel 要构建某个 Target 的时候，Bazel 会分析这个文件如何构建（构建动作定义为 Action，和其他构建系统的 Task 大同小异），如果 Target 依赖了其他 Target，Bazel 会进一步分析依赖的 Target 又是如何构建生成的，这样一层层分析下去，最终绘制出完整的执行计划。</p>
<p>这里的 Action 是 Bazel 的核心概念，也是 Bazel 区分于其他构建工具的重要因素：Action 由 Rule 决定，本质上是 Rule 的实例化；而 Rule 不由构建者决定，构建者只能声明使用了某个 Rule。更具体的来说，Rule 是剥离于项目外的，由 Bazel 官方开发，同时对外暴露相关定义，从而允许第三方开发者开发自定义 Rule。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/04/22/bazel-1/task.png"
                      class="" title="Bazel 原理"
                >

<p>举个🌰，下面是两个 BUILD.Bazel 文件( Bazel 描述文件)</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// main/BUILD.bazel</span><br><span class="line">cc_binary(</span><br><span class="line">    name = &quot;hello-world&quot;,</span><br><span class="line">    srcs = [&quot;hello-world.cc&quot;],</span><br><span class="line">    deps = [</span><br><span class="line">        &quot;:hello-greet&quot;,</span><br><span class="line">        &quot;//lib:hello-time&quot;</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cc_library(</span><br><span class="line">    name = &quot;hello-greet&quot;,</span><br><span class="line">    srcs = [&quot;hello-greet.cc&quot;],</span><br><span class="line">    hdrs = [&quot;hello-greet.h&quot;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// lib/BUILD.bazel</span><br><span class="line">cc_library(</span><br><span class="line">    name = &quot;hello-time&quot;,</span><br><span class="line">    srcs = [&quot;hello-time.cc&quot;],</span><br><span class="line">    hdrs = [&quot;hello-time.h&quot;],</span><br><span class="line">    deps = [</span><br><span class="line">        &quot;:sum&quot;</span><br><span class="line">        &quot;//proto:example_data&quot;</span><br><span class="line">    ],</span><br><span class="line">    visibility = [&quot;//main:__pkg__&quot;]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">cc_library(</span><br><span class="line">    name = &quot;sum&quot;,</span><br><span class="line">    srcs = [&quot;sum.cpp&quot;],</span><br><span class="line">    hdrs = [&quot;sum.h&quot;],</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>


<p>最终，Bazel 会生成类似于如下的编译产物：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2024/04/22/bazel-1/process.png"
                      class="" title="编译过程"
                >

<h3 id="并行编译"><a href="#并行编译" class="headerlink" title="并行编译"></a>并行编译</h3><p>Bazel 精准的知道每个 Action 依赖哪些文件，这使得没有相互依赖关系的 Action 可以并行执行，而不用担心竞争问题。因此我们可以充分利用多核 CPU 的特性，尽可能提高并发，优化构建效率。</p>
<h3 id="增量构建"><a href="#增量构建" class="headerlink" title="增量构建"></a>增量构建</h3><p>Bazel 会检测本地文件系统是否保留着上一次构建的 outputs，如果有，此时 Bazel 只需要分析 inputs, commands 和 envs 和上次相比有没有改变，没有改变就直接跳过该 Action 的执行。尽管这个功能很多现代构建工具都支持，但 Bazel 仍有独特的优势：更快，更准。</p>
<p>这是因为：Bazel 采用了 Client&#x2F;Server 架构，当用户键入 Bazel build 命令时，调用的是 Bazel 的 client 工具，而 client 会拉起 server，并通过 grpc 协议将请求 (buildRequest) 发送给它。由 server 负责配置的加载，ActionGraph 的生成和执行。构建结束后，Server 并不会立即销毁，而 ActionGraph 也会一直保存在内存中。当用户第二次发起构建时，Bazel 会检测工作空间的哪些文件发生了改变，并更新 ActionGraph。如果没有文件改变，就会直接复用上一次的 ActionGraph 进行分析。</p>
<h3 id="封闭性"><a href="#封闭性" class="headerlink" title="封闭性"></a>封闭性</h3><p>Bazel 将构建分为多个 action，单个 action 被要求是「封闭」的，这意味着：在任何时间、任何场景，相同的 action 总应该获得相同的结果。封闭性是 Bazel 远程缓存与远程执行的基础。通常来说，Bazel 的 rule 会尽最大可能满足封闭性。</p>
<h2 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h2><p>在上述的架构中，我们发现，既然 Bazel Action 的执行是封闭的，那么它在哪里执行，有谁执行，便不再重要，因此，一个直观的想法便出现了：为什么不能在远程执行构建，本地只需要下载产物即可呢？远程缓存和远程构建便是 bazel 在这方面的实践。</p>
<h3 id="远程缓存"><a href="#远程缓存" class="headerlink" title="远程缓存"></a>远程缓存</h3><p>因为 Action 满足封闭性，即相同的 Action 信息一定产生相同的结果，因此可以建立 Action 到 ActionResult 的映射。为了便于索引，Bazel 把 Action 信息通过 sha256 哈希算法压缩成摘要 (Digest)，把 Digest 到 ActionResult 的映射存储在云端，就可以实现 Action 的远程缓存。其他用户&#x2F;机器在执行某个 Action 的时候，可以先查询此 Action 是否存在。如果存在，直接复用即可。</p>
<p>远程缓存的更多信息可以参见：<a class="link"   href="https://km.sankuai.com/collabpage/2006036512" >https://km.sankuai.com/collabpage/2006036512<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="远程构建"><a href="#远程构建" class="headerlink" title="远程构建"></a>远程构建</h3><p>更进一步的，既然 ActionResult 可以被不同的 Bazel 任务共享，说明 ActionResult 和 Action 在哪里执行并没有关系。因此，Bazel 在构建时，可以把 Action 发送给另一台服务器执行，对方执行完，向 CAS 上传 ActionResult，然后本地再下载。</p>
<p>远程构建的更多信息可以参见：<a class="link"   href="https://km.sankuai.com/collabpage/2113624250" >https://km.sankuai.com/collabpage/2113624250<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="挑战-No-Silver-Bullet"><a href="#挑战-No-Silver-Bullet" class="headerlink" title="挑战- No Silver Bullet"></a>挑战- No Silver Bullet</h2><ul>
<li>封闭性</li>
</ul>
<p>毫无疑问，「封闭」是远程执行的生命线，无论是增量构建还是远程执行，但是，想要真正做到封闭性并不容易，尤其是对于 C++ 这类语言，大部分 C++ 项目都对本地缓存存在严格的要求，如 gcc 版本，lib 库等等，这些都是封闭性的天敌。如何提供封闭性更好的 rule，以及解决不封闭带来的诸多问题，始终是 Bazel 的重要挑战。</p>
<ul>
<li>远程构建</li>
</ul>
<p>远程构建是 Bazel 的核心发展目标之一，如果没有远程构建，Bazel 只是一个优秀的构建工具，但远程构建则使得 Bazel 能够发展为支撑企业级别的大型分布式构建系统。但是，必须承认的是，远程构建仍然还在发展阶段，许多问题仍然有待解决。</p>
<ul>
<li>规模</li>
</ul>
<p>事实上，Bazel 的优势也存在一定的局限性，因为其最初设计目标是为了解决谷歌内部大仓的构建问题，因此天然倾向于大规模、多语言、多维护人员的大型仓库，为了对大仓友好付出了许多其他方面的代价，尽管对于大仓而言，这些代价相较于得到的优势可接受甚至微不足道，但对于普通仓库而言则未必如此。归根结底，这是规模的问题。</p>
<blockquote>
<p>2020年，有 issue 要求在 k8s 项目中移除 Bazel (<a class="link"   href="https://github.com/kubernetes/kubernetes/issues/88553)%EF%BC%8C%E6%AD%A4" >https://github.com/kubernetes/kubernetes/issues/88553)，此<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> issue 在社区引发了热烈的讨论，并且最终在 2021 年宣布通过并合入主分支。总结此 issue，核心原因是：</p>
<p>k8s 本身是单语言（Go）项目，早期引入 Bazel 的是为了使用构建缓存，但 Go 后续支持了构建缓存，此时 Bazel 对于 k8s 而言几乎没有优势，反而会为了维护 Bazel 和 go-build 两套构建工具付出很大的代价。</p>
</blockquote>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title>大厂祛魅</title>
    <url>/2024/04/19/career-review/</url>
    <content><![CDATA[<h1 id="大厂祛魅"><a href="#大厂祛魅" class="headerlink" title="大厂祛魅"></a>大厂祛魅</h1><p>我给你写个蛋，程序员都在忙着搞程序呢，哪有人看这破博客～</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
  </entry>
  <entry>
    <title>一些碎碎念</title>
    <url>/1999/10/01/fragment/</url>
    <content><![CDATA[<style>
    .cd-timeline.svelte-1t2uafz .svelte-1t2uafz,.cd-timeline.svelte-1t2uafz .svelte-1t2uafz::after,.cd-timeline.svelte-1t2uafz .svelte-1t2uafz::before{-webkit-box-sizing:border-box;box-sizing:border-box}.cd-timeline.svelte-1t2uafz{font-size:1.6rem;font-family:"Droid Serif", serif;color:#7f8c97;background-color:#e9f0f5}.cd-timeline.svelte-1t2uafz a{color:#acb7c0;text-decoration:none}.cd-timeline.svelte-1t2uafz img{max-width:100%}.cd-timeline.svelte-1t2uafz h1,h2{font-family:"Open Sans", sans-serif;font-weight:bold}.cd-timeline.svelte-1t2uafz{overflow:hidden;margin:2em auto}.cd-timeline__container.svelte-1t2uafz{position:relative;width:90%;max-width:1170px;margin:0 auto;padding:2em 0}.cd-timeline__container.svelte-1t2uafz::before{content:'';position:absolute;top:0;left:18px;height:100%;width:4px;background:#d7e4ed}@media only screen and (min-width: 1170px){.cd-timeline.svelte-1t2uafz{margin-top:3em;margin-bottom:3em}.cd-timeline__container.svelte-1t2uafz::before{left:50%;margin-left:-2px}}.cd-timeline__block.svelte-1t2uafz{position:relative;margin:2em 0}.cd-timeline__block.svelte-1t2uafz:after{content:"";display:table;clear:both}.cd-timeline__block.svelte-1t2uafz:first-child{margin-top:0}.cd-timeline__block.svelte-1t2uafz:last-child{margin-bottom:0}@media only screen and (min-width: 1170px){.cd-timeline__block.svelte-1t2uafz{margin:4em 0}}.cd-timeline__img.svelte-1t2uafz{position:absolute;top:0;left:0;width:40px;height:40px;border-radius:50%;-webkit-box-shadow:0 0 0 4px white, inset 0 2px 0 rgba(0, 0, 0, 0.08), 0 3px 0 4px rgba(0, 0, 0, 0.05);box-shadow:0 0 0 4px white, inset 0 2px 0 rgba(0, 0, 0, 0.08), 0 3px 0 4px rgba(0, 0, 0, 0.05)}.cd-timeline__img.svelte-1t2uafz{background:#75ce66}@media only screen and (min-width: 1170px){.cd-timeline__img.svelte-1t2uafz{width:60px;height:60px;left:50%;margin-left:-30px;-webkit-transform:translateZ(0);transform:translateZ(0)}}@-webkit-keyframes svelte-1t2uafz-cd-bounce-1{0%{opacity:0;-webkit-transform:scale(0.5);transform:scale(0.5)}60%{opacity:1;-webkit-transform:scale(1.2);transform:scale(1.2)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes svelte-1t2uafz-cd-bounce-1{0%{opacity:0;-webkit-transform:scale(0.5);transform:scale(0.5)}60%{opacity:1;-webkit-transform:scale(1.2);transform:scale(1.2)}100%{-webkit-transform:scale(1);transform:scale(1)}}.cd-timeline__content.svelte-1t2uafz{position:relative;margin-left:60px;background:white;border-radius:0.25em;padding:1em;-webkit-box-shadow:0 3px 0 #d7e4ed;box-shadow:0 3px 0 #d7e4ed}.cd-timeline__content.svelte-1t2uafz:after{content:"";display:table;clear:both}.cd-timeline__content.svelte-1t2uafz::before{content:'';position:absolute;top:16px;right:100%;height:0;width:0;border:7px solid transparent;border-right:7px solid white}.cd-timeline__content.svelte-1t2uafz h2.svelte-1t2uafz{color:#303e49}.cd-timeline__content.svelte-1t2uafz p,.cd-timeline__date.svelte-1t2uafz{font-size:1.3rem}.cd-timeline__content.svelte-1t2uafz p{margin:1em 0;line-height:1.6}.cd-timeline__date.svelte-1t2uafz{display:inline-block}.cd-timeline__date.svelte-1t2uafz{float:left;padding:.8em 0;opacity:.7}@media only screen and (min-width: 768px){.cd-timeline__content.svelte-1t2uafz h2.svelte-1t2uafz{font-size:2rem}.cd-timeline__content.svelte-1t2uafz p{font-size:1.6rem}.cd-timeline__date.svelte-1t2uafz{font-size:1.4rem}}@media only screen and (min-width: 1170px){.cd-timeline__content.svelte-1t2uafz{margin-left:0;padding:1.6em;width:45%;-webkit-transform:translateZ(0);transform:translateZ(0)}.cd-timeline__content.svelte-1t2uafz::before{top:24px;left:100%;border-color:transparent;border-left-color:white}.cd-timeline__date.svelte-1t2uafz{position:absolute;width:100%;left:122%;top:6px;font-size:1.6rem}.cd-timeline__block.svelte-1t2uafz:nth-child(even) .cd-timeline__content.svelte-1t2uafz{float:right}.cd-timeline__block.svelte-1t2uafz:nth-child(even) .cd-timeline__content.svelte-1t2uafz::before{top:24px;left:auto;right:100%;border-color:transparent;border-right-color:white}.cd-timeline__block.svelte-1t2uafz:nth-child(even) .cd-timeline__date.svelte-1t2uafz{left:auto;right:122%;text-align:right}}@-webkit-keyframes svelte-1t2uafz-cd-bounce-2{0%{opacity:0;-webkit-transform:translateX(-100px);transform:translateX(-100px)}60%{opacity:1;-webkit-transform:translateX(20px);transform:translateX(20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes svelte-1t2uafz-cd-bounce-2{0%{opacity:0;-webkit-transform:translateX(-100px);transform:translateX(-100px)}60%{opacity:1;-webkit-transform:translateX(20px);transform:translateX(20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@-webkit-keyframes svelte-1t2uafz-cd-bounce-2-inverse{0%{opacity:0;-webkit-transform:translateX(100px);transform:translateX(100px)}60%{opacity:1;-webkit-transform:translateX(-20px);transform:translateX(-20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes svelte-1t2uafz-cd-bounce-2-inverse{0%{opacity:0;-webkit-transform:translateX(100px);transform:translateX(100px)}60%{opacity:1;-webkit-transform:translateX(-20px);transform:translateX(-20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}
    </style>
<section class="cd-timeline js-cd-timeline svelte-1t2uafz">
    <div class="cd-timeline__container svelte-1t2uafz">
        <div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
上班无聊->刷每日一题->打开leetcode->发现hard->再见👋
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-12-16</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
今年的储蓄计划彻底破产，分币不剩，严重超支，烦死了
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-12-10</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
装修真的好麻烦啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊。
身边的每个朋友都在说，我装出来的房子没有家的感觉，太冷了。
可是我也不知道到底什么是家的感觉，毕竟从 9 岁开始，就一直住在宿舍了。
😊
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-12-10</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
我写不出算法题，也写不出方案。。。我也不知道该咋办了
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-08-28</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
做了个很奇怪的梦，梦到了很多年前的一个人。可惜，已经连在梦里都不记得那个人的样子了。
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-07-05</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
什么时候才能写明白动态规划题。。。btw. 假如我的力扣刷题日历像我的瑞幸咖啡日历就好了。。。
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-06-28</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
打算升级下整个站点的主题和功能，找了很久，那些贼拉炫酷的站点我这种业余前端是真的搭不起来，还是直接用 butterfly 吧
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-06-24</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
好想 618 给自己买点东西啊，不然好久没消费了，感觉钱都白赚了。。。但是一看自己卡里 5000 块钱都没了。。。生活太艰难了
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-05-31</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
仍然记得那是中学时一个平凡的初秋黄昏，我在田径场的草坪上漫不经心地坐着看小说，停在山尖的落日洒出柔和的光芒，别说心事，心头竟连一件闲事都没有。
我总以为那是一个平凡的日子。然而往后多年一路奔跑再无半刻停歇，那样的日子再也不会有了。
我们无法估量「片刻」的价值，除非它成为回忆。
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-05-21</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
oncall 值班真的会让人犯厌蠢症，作为工程师没有任何解决问题的能力，文档不会看，google/内网不会查，最基本的错误提示看不明白，出现任何问题只会 找人问然后要求别人解决，要不就是无脑甩锅跟个低能一样，某些人 35 被裁都裁晚了。
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-05-08</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
不想参加饭局。以前觉得有朋友一起约饭是很快乐的事情，但随着年岁的增长，「朋友」愈发通货膨胀，似乎什么样的人都能称之为「朋友」， 几乎每周都有饭局，真的不想去，只想周末好好休息休息，然而又不好意思拒绝。真的很烦。
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-04-30</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
u1s1，这个页面真的好丑。。。但是作为一名业余得不能再业余的前端，有个这样的页面就不错了，找不好更好的 hexo 能用的解决方案
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-04-10</span>
            </div>
        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">
            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">
            </div>
            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">
                <h2 class="svelte-1t2uafz"></h2>
                <font size=4>
我写不出算法题，也写不出方案。。。我也不知道该咋办了
</font>

                <span class="cd-timeline__date svelte-1t2uafz">2024-04-01</span>
            </div>
        </div>
    </div>
</section>]]></content>
  </entry>
  <entry>
    <title>Go defer+闭包的一个小坑</title>
    <url>/2024/06/07/go-defer-closure/</url>
    <content><![CDATA[<h1 id="Go-defer-闭包的一个小坑"><a href="#Go-defer-闭包的一个小坑" class="headerlink" title="Go defer+闭包的一个小坑"></a>Go defer+闭包的一个小坑</h1><p>今天在写代码的时候，发现一个奇怪的事情，在将无效的逻辑简化之后，可以总结出这样的一段代码：</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	a := <span class="string">&quot;1&quot;</span></span><br><span class="line">	<span class="keyword">defer</span> fmt.Println(<span class="string">&quot;defer only: &quot;</span> + a)</span><br><span class="line">	<span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; fmt.Println(<span class="string">&quot;defer closure: &quot;</span> + a) &#125;()</span><br><span class="line"></span><br><span class="line">	a = <span class="string">&quot;2&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>先让我们想一想，这段代码的输出是什么？我的之前的理解中，显然，这是问 defer 的执行顺序问题，那太简单了，毫无疑问应该输出：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">defer closure: 1</span><br><span class="line">defer only: 1</span><br></pre></td></tr></table></figure></div>

<p>然而，真的执行这段代码之后，我惊讶的发现，真实的输出是：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">defer closure: 2</span><br><span class="line">defer only: 1</span><br></pre></td></tr></table></figure></div>
<p>这就有些让我费解了，正好借着这个机会，我对 defer&amp; 闭包做了一次系统的整理。</p>
<h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><h3 id="预计算"><a href="#预计算" class="headerlink" title="预计算"></a>预计算</h3><p>Go 官方文档对此由如下<a href="">阐述</a></p>
<p>to be finished</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title>Go Vendor-时代的眼泪</title>
    <url>/2024/05/22/go-vendor/</url>
    <content><![CDATA[<h1 id="Go-Vendor"><a href="#Go-Vendor" class="headerlink" title="Go Vendor"></a>Go Vendor</h1><p>go vendor 也算时代的眼泪了，在 go1.5～1.11 之间被相对广泛的使用，在 1.11之后基本就退出历史舞台了，原因无他，go module 太好用了。 即便政治正确一点地说，它和 cargo、bazel 相比功能上没有那么丰富，但其轻量、简便在包管理工具中也难寻其右。</p>
<p>事实上，在我 21 年开始接触 Go 时，主流 Go 版本已经来到 1.16，因此我从未接触过 vendor 项目， 甚至连 GOPATH 也不用太了解。 不过，既然是时代的眼泪，vendor 就一定还留着其泪痕。</p>
<p>跳槽之后，新工作的核心仓库，是一个 14 年就开始的古老项目，现在还留着不少针对 go1.5 的条件编译代码和汇编。此仓库主打一个历史悠久， 历经古法包管理（直接复制仓库）、bazel、vendor 等多个模式，并且由于这些模式的混杂导致至今未能升级到 go module，此外， go 版本也停留在 go1.12，主要也没啥人敢升，一来没产出，二来容易出问题。虽说程序员和代码有一个能跑就行，但现在的大环境，程序员怕是不太好跑。</p>
<p>因此，为了开发这个仓库，我对 go vendor 进行了相对深入的了解，记录一下。</p>
<h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p>GOPATH 是「标记 Go 代码工作区」的环境变量，一般来说，GOPATH 下应该有三个子文件夹：bin、pkg、src，对应了主要的三个功能：</p>
<ul>
<li>标记 go 二进制地址。通过 go install&#x2F;go get 安装的二进制文件，会放在 $GOPATH&#x2F;bin 中，此规范始终是生效的。</li>
<li>标记依赖包地址。在启用 go module 之后，go module 会将下载的依赖包放到 $GOPATH&#x2F;pkg 中，并且加上版本 tag 以及 sum 信息。自然，此规范是在启用 go module 之后才有效。</li>
<li>标记源码地址。这个主要是针对 vendor 模式，在下面会细讲，在 module 模式下已经事实上不再需要了吗，也不再有目录规范，当前源码想放哪就放哪，不过通常会基于历史习惯放到 src 下，但比如 Goland 新建项目则会默认放到 GolandProject 下。</li>
</ul>
<p>简单总结下：在 module 模式下，GOPATH 下的两个主要功能：bin&amp;pkg 都是由 go tools 自动管理的，对于程序员而言几乎不再需要被关注。</p>
<h2 id="Vendor"><a href="#Vendor" class="headerlink" title="Vendor"></a>Vendor</h2><p>Vendor 模式是在 Go 早期没有包管理的野蛮发展下形成的一个社区实践，并在 1.5 被正式纳入语言特性，1.13 结束生命周期。 Vendor 其实很简单，和 node_modules 差不太多，本质上都是「约定一个目录存放第三方包」，这个目录便是 vendor。</p>
<p>让我们以一个例子开始。假如你创建了一个项目，这个项目目前为止只使用了标准库，我们知道标准库在 GOROOT 下保存，那么，你们的代码只需要在 GOPATH&#x2F;src 下挂着就行了，当然，原则上来说你挂哪都行，甚至根目录也无所谓，大不了临时改一下 $GOPATH。</p>
<p>不过，我们都是习惯良好的工程师，为了方便管理手上的诸多项目，我们决定固定 GOPATH，并且按照项目名称进行良好的目录层级划分，就像 JAVA 那样（先让我们这么做，后面我们会明白这么做的好处的，良好的习惯总是会有回报的），我们假定这个项目叫 github.com&#x2F;hyphennn&#x2F;proj1，于是，你的目录如下：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">$GOPATH</span><br><span class="line">    - bin</span><br><span class="line">    - src</span><br><span class="line">        - github.com</span><br><span class="line">            - hyphennn</span><br><span class="line">                - proj1 // 下面的层级是你的源代码</span><br></pre></td></tr></table></figure></div>
<p>接下来，让我们迭代这个项目，以及项目中的包管理机制</p>
<h3 id="版本一-GOPATH-机制"><a href="#版本一-GOPATH-机制" class="headerlink" title="版本一 GOPATH 机制"></a>版本一 GOPATH 机制</h3><p>现在，我们决定引入某一个功能，这个功能我们曾经写过，只不过在 github.com&#x2F;hyphennn&#x2F;proj2 这个项目中，假定代码在 github.com&#x2F;hyphennn&#x2F;proj2&#x2F;waibiwaibi&#x2F;waibibabo.go 这个文件里面，自然地，复制过去是个好想法，但假如这个文件依赖了项目中的其他文件呢？都复制过去吗？要是变量名、方法名有冲突咋办？更进一步的，以后 proj2 继续迭代，难道改一次代码就复制一次吗？这显然不合理。事实上，Go 提供了解决方案，你可以如下组织你的代码：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">$GOPATH</span><br><span class="line">    - bin</span><br><span class="line">    - src</span><br><span class="line">        - github.com</span><br><span class="line">            - hyphennn</span><br><span class="line">                - proj1 // 下面的层级是你的源代码</span><br><span class="line">                - proj2</span><br></pre></td></tr></table></figure></div>
<p>这样，你只需要 import 一下就好了：</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;github.com/hyphennn/proj2/waibiwaibi&quot;</span></span><br></pre></td></tr></table></figure></div>
<p>这种方式是很直观的，因为你引用项目内其他文件夹时你也是这么做的，当项目中被声明 import “xxx” 时，编译器会去寻找 GOPATH&#x2F;src&#x2F;xxx，如果找到，就会将其作为依赖库加入编译。当然，会优先在 $GOROOT 下找标准库。</p>
<p>项目跑的很不错，现在该添加新的功能了。功能太复杂，人力成本非常有限，不过好消息是我们找到了两个来自互联网的包，帮助我们解决了问题，他们分别是：github.com&#x2F;helper1&#x2F;pkg1 和 golang.org&#x2F;helper2&#x2F;pkg2。怎么把这两个包引入呢？一个很直观的思路就是：像使用我们自己的项目一样使用这两个包，参照一下上面 import 寻找目标的原理，我们能很轻易的给出如下目录：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">$GOPATH</span><br><span class="line">    - bin</span><br><span class="line">    - src</span><br><span class="line">        - github.com</span><br><span class="line">            - hyphennn</span><br><span class="line">                - proj1 // 下面的层级是你的源代码</span><br><span class="line">                - proj2</span><br><span class="line">            - helper1</span><br><span class="line">                - pkg1</span><br><span class="line">        - golang.org</span><br><span class="line">            - helper2</span><br><span class="line">                -pkg2</span><br></pre></td></tr></table></figure></div>
<p>同样的，import 语句如下：</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>(</span><br><span class="line">    <span class="string">&quot;github.com/hyphennn/proj2/waibiwaibi&quot;</span></span><br><span class="line">    <span class="string">&quot;github.com/helper1/pkg1&quot;</span> <span class="comment">// 让我们省略掉后面的子目录，毕竟都差不多</span></span><br><span class="line">    <span class="string">&quot;golang.org/helper2/pkg2&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>
<p>尝试一下，运行良好，以后就这么干，可以不断引入新的包。</p>
<p>到此为止，我们完成了第一版的包管理机制，严格来说并不叫包管理，因为它完全依赖 GOPATH，不过这不重要，我们的项目很棒，赚大钱了(bushi</p>
<h3 id="版本二-Vendor-机制"><a href="#版本二-Vendor-机制" class="headerlink" title="版本二 Vendor 机制"></a>版本二 Vendor 机制</h3><p>如果你了解过包管理工具，以及构建工程，显然，GOPATH 不是个好的方案，它至少有如下缺点：</p>
<ul>
<li>自己编写的包，和网络上的第三方包，都放置在GOPATH&#x2F;src下，容易造成混乱，不方便管理。</li>
<li>项目中用到的依赖包，都需要手动go get下载，大项目来说非常麻烦</li>
<li>如果引入的三方包中又引入了其他三方包，就不好处理了，需要找到以后，使用go get去下载。</li>
<li>go get没有版本的概念，团队合作中，很容易出现使用了不同版本的包，造成不必要的错误。</li>
<li>协作开发时，需要统一各个开发成员本地$GOPATH&#x2F;src下的依赖包。</li>
<li>引用的包引用了已经转移的包，而作者没改的话，需要自己修改引用。</li>
</ul>
<p>让我们想想别的工具怎么解决的。Go 作为世界上第二好的语言，不妨学习下世界上最好的语言-PHP。PHP 使用 Composer 作为包管理器，将第三方包放到根目录下的一个名为 vendor 的目录下。好主意，让我们融会贯通下，制订 Go 的 vendor 机制。</p>
<blockquote>
<p>当然，需要指出的是，我根本不清楚 Go Vendor 的起源，以上只是为了告诉大家世界上最好的语言是 PHP。</p>
</blockquote>
<p>首先，我们把要求团队把所有的依赖包都放到一个叫做 vendor 的目录，这一步有点像 js 著名（<del>臭名昭著</del>）的 node_modules。不过，由于不同域名、仓库组下的仓库是可以同名的，因此，我们仍然要求在 vendor 下按照层级放置依赖包（就像 GOPATH 里面的那样）。由此，我们解决了「无法区分自有仓库和第三方依赖」的问题，在 vendor 下的是第三方依赖，GOPATH 下的是自有。</p>
<p>其次，我们要求代码仓库上传的时候把 vendor 带上，虽然这会一定程度使得代码仓库体积更大，但这无非增加点碳排放和代码仓库组同事的工作量罢了，却能很好的解决「手动下载依赖包」带来的诸多问题，这对我们当然是可接受的（代码仓库组同事：你礼貌吗。</p>
<p>最后，我们允许一个项目中存在多个 vendor 目录，他们位于不同的目录下，影响着不同目录的依赖，此规则的优势或许难以直观地看出，但使用过程中我们会发现它的好处的。这可能有点绕，我们举个例子，我们的项目 repo 依赖 pkg1, pkg2 和 pkg3，他们的目录分别如下：repo&#x2F;module1&#x2F;vendor&#x2F;pkg1，repo&#x2F;module2&#x2F;vendor&#x2F;pkg2，repo&#x2F;vendor&#x2F;pkg3。那么，你在 repo&#x2F;module1&#x2F; 下可以 import pkg1, pkg3，在 repo&#x2F;module2&#x2F; 下可以 import pkg2, pkg3，在 repo&#x2F; 和 repo&#x2F;module3 下则只能 import pkg3。此外，我们还允许在 GOPATH&#x2F;src 下的每一级目录（包括 src）都有 vendor，最终寻找依赖的规则在下文中列出。</p>
<p>以上，我们解决了一部分问题，至于剩下的问题，让我们相信后人的智慧吧，大家都喜欢这么做，我们自然也可以～</p>
<p>最终，我们形成了如下的一组规则，这便是 Vendor 机制：</p>
<ul>
<li>将依赖包统一放到一个叫 vendor 的目录下，并遵循：<ul>
<li>可以有多个不同目录下的 vendor，其作用域满足下面的查找规则</li>
<li>上传项目的时候应该将 vendor 一并传到代码仓库中</li>
<li>单个 vendor 目录下的包放置目录规则和 GOPATH 一致，就像 vendor 目录是 $GOPATH&#x2F;src 一样</li>
<li>vendor 目录仅作为依赖包使用</li>
</ul>
</li>
<li>查找规则<ul>
<li>在遇到 import 语句时（非标准库），首先查找当前包下的 vendor 目录</li>
<li>向上级目录查找，直到找到 src 下的 vendor 目录</li>
<li>在 GOROOT 目录下查找</li>
<li>在 GOPATH 下面查找依赖包</li>
</ul>
</li>
</ul>
<p>基于上述规则，我们调整项目如下：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">$GOPATH</span><br><span class="line">    - bin</span><br><span class="line">    - vendor</span><br><span class="line">        github.com</span><br><span class="line">            - helper8</span><br><span class="line">                - pkg10</span><br><span class="line">                - pkg11</span><br><span class="line">    - src</span><br><span class="line">        - github.com</span><br><span class="line">            - hyphennn</span><br><span class="line">                - proj1 // 下面的层级是你的源代码</span><br><span class="line">                    - 其他代码</span><br><span class="line">                    - vendor</span><br><span class="line">                        - github.com</span><br><span class="line">                            - helper1</span><br><span class="line">                                - pkg1</span><br><span class="line">                                - pkg2</span><br><span class="line">                            - helper2</span><br><span class="line">                                - pkg3</span><br><span class="line">                                - pkg4</span><br><span class="line">                        - golang.org</span><br><span class="line">                            - helper3</span><br><span class="line">                                - pkg4</span><br><span class="line">                            - helper4</span><br><span class="line">                                - pkg5</span><br><span class="line">                                - pkg6</span><br><span class="line">                - proj2</span><br><span class="line">                    - vendor</span><br><span class="line">                        - github.com</span><br><span class="line">                            - helper2</span><br><span class="line">                                - pkg3</span><br><span class="line">                                - pkg4</span><br><span class="line">                        - golang.org</span><br><span class="line">                            - helper3</span><br><span class="line">                                - pkg4</span><br><span class="line">            - vendor</span><br><span class="line">                - github.com</span><br><span class="line">                    - helper5</span><br><span class="line">                        - pkg6</span><br><span class="line">                        - pkg7</span><br><span class="line">        - golang.org</span><br><span class="line">            - helper2</span><br><span class="line">                -pkg2</span><br></pre></td></tr></table></figure></div>

<p>其中的逻辑看起来可能有些绕，这里地方太小，写不下（绝对不是懒</p>
<p>按照上面说的规则，去理解一下，整体还是非常清晰的。</p>
<h3 id="版本三-Module-机制"><a href="#版本三-Module-机制" class="headerlink" title="版本三 Module 机制"></a>版本三 Module 机制</h3><p>Vendor 当然有各种缺点，于是 Module 机制出现了，并且良好地运行至今。介绍 Module 的文章太多了，这里就不班门弄斧了～</p>
<h2 id="govendor"><a href="#govendor" class="headerlink" title="govendor"></a>govendor</h2><p><a class="link"   href="https://github.com/kardianos/govendor" >govendor<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 是一个应用比较广泛的项目，主要目标是解决「vendor 目录过于占用空间」和「vendor 目录难以管理依赖包版本」的问题，一定程度上成为了 Go 包管理的事实标准。如今此项目已经不再维护了，也不接收任何新的 PR，但仍然不妨碍我们了解一下。</p>
<p>govendor 的思路有些像 npm，核心是：不再直接管理依赖包文件，而是使用 vendor.json 的文件来记录依赖包的元信息，是的，这个思路和 package.json 甚至 go.mod 都是非常相似的。使用 govendor 后，原来存放诸多依赖包的 vendor 目录下只需要放置一个 vendor.json 文件，由 govendor 提供的命令行工具维护此文件以及基于此文件下载依赖包。下面给出一个元信息的实例：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;checksumSHA1&quot;: &quot;GcaTbmmzSGqTb2X6qnNtmDyew1Q=&quot;,</span><br><span class="line">  &quot;path&quot;: &quot;github.com/pkg/errors&quot;,</span><br><span class="line">  &quot;revision&quot;: &quot;a2d6902c6d2a2f194eb3fb474981ab7867c81505&quot;,</span><br><span class="line">  &quot;revisionTime&quot;: &quot;2016-06-27T22:23:52Z&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>从此实例中就可以大体明白 govendor 的工作原理了，并不算非常复杂，我想大约也是因此 govendor 才广受欢迎。</p>
<p>使用 govendor 后，我们项目的目录便可以简化如下：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">$GOPATH</span><br><span class="line">    - bin</span><br><span class="line">    - vendor</span><br><span class="line">        github.com</span><br><span class="line">            - vendor.json</span><br><span class="line">    - src</span><br><span class="line">        - github.com</span><br><span class="line">            - hyphennn</span><br><span class="line">                - proj1 // 下面的层级是你的源代码</span><br><span class="line">                    - 其他代码</span><br><span class="line">                    - vendor</span><br><span class="line">                        - vendor.json</span><br><span class="line">                - proj2</span><br><span class="line">                    - vendor</span><br><span class="line">                        - vendor.json</span><br><span class="line">            - vendor</span><br><span class="line">                - vendor.json</span><br><span class="line">        - golang.org</span><br><span class="line">            - helper2</span><br><span class="line">                -pkg2</span><br></pre></td></tr></table></figure></div>

<p>govendor 提供如下的命令参数，含义参照一下解释就能大致理清楚：</p>
<div class="code-container" data-rel="Text"><figure class="iseeu highlight text"><table><tr><td class="code"><pre><span class="line">&lt;sub-command&gt;</span><br><span class="line">	init     Create the &quot;vendor&quot; folder and the &quot;vendor.json&quot; file.</span><br><span class="line">	list     List and filter existing dependencies and packages.</span><br><span class="line">	add      Add packages from $GOPATH.</span><br><span class="line">	update   Update packages from $GOPATH.</span><br><span class="line">	remove   Remove packages from the vendor folder.</span><br><span class="line">	status   Lists any packages missing, out-of-date, or modified locally.</span><br><span class="line">	fetch    Add new or update vendor folder packages from remote repository.</span><br><span class="line">	sync     Pull packages into vendor folder from remote repository with revisions</span><br><span class="line">  	             from vendor.json file.</span><br><span class="line">	migrate  Move packages from a legacy tool to the vendor folder with metadata.</span><br><span class="line">	get      Like &quot;go get&quot; but copies dependencies into a &quot;vendor&quot; folder.</span><br><span class="line">	license  List discovered licenses for the given status or import paths.</span><br><span class="line">	shell    Run a &quot;shell&quot; to make multiple sub-commands more efficient for large</span><br><span class="line">	             projects.</span><br><span class="line"></span><br><span class="line">	go tool commands that are wrapped:</span><br><span class="line">	  `+&lt;status&gt;` package selection may be used with them</span><br><span class="line">	fmt, build, install, clean, test, vet, generate, tool</span><br><span class="line">	</span><br><span class="line">&lt;status&gt;</span><br><span class="line">	+local    (l) packages in your project</span><br><span class="line">	+external (e) referenced packages in GOPATH but not in current project</span><br><span class="line">	+vendor   (v) packages in the vendor folder</span><br><span class="line">	+std      (s) packages in the standard library</span><br><span class="line"></span><br><span class="line">	+excluded (x) external packages explicitly excluded from vendoring</span><br><span class="line">	+unused   (u) packages in the vendor folder, but unused</span><br><span class="line">	+missing  (m) referenced packages but not found</span><br><span class="line"></span><br><span class="line">	+program  (p) package is a main package</span><br><span class="line"></span><br><span class="line">	+outside  +external +missing</span><br><span class="line">	+all      +all packages</span><br></pre></td></tr></table></figure></div>

<p>不过，govendor 由于已经不再维护了，因此其在 M 系列芯片的 Mac 上不可用，而且也不清楚高版本 Go 的兼容性。</p>
<p>由于工作项目需要使用 govendor，因此我复制了一份代码，处理了部分兼容性问题，目前在我本地（Mac M2）看起来没啥问题。地址：<a class="link"   href="https://github.com/hyphennn/govendor" >https://github.com/hyphennn/govendor<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 。但不清楚有没有未知问题。<br>ps. 之所以不 fork，是因为原项目不再维护了，fork 没有任何意义。</p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title>hello-world</title>
    <url>/2024/01/25/hello-world/</url>
    <content><![CDATA[<h1 id="Hyphen"><a href="#Hyphen" class="headerlink" title="Hyphen"></a>Hyphen</h1><p>This is a Hello World page</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;Hello Wolrd!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title>Only For Hyphen</title>
    <url>/2018/06/08/i-am-not-hyphen/</url>
    <content><![CDATA[
<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ca337aa122ec6e3285ccc6d6eff9c93aa708a3097010110a32325b5176ac5709">07cd4cdb5d86168d61f9308838857682f80c7bcf9206a39137bd9439ac821291291cbe71163a5bd05e3a06bd83598241ddeca8fa7000ce90b31ca670b38f5656dbc5352157ce8217579cd14ddc07666864a62c39147840d86d773263fee7dc49911e009e138b7f0d5ca432f704452fd0222d455679d17587821d86f6094b1c64817a50a9e437e8704ffc56f36911dd6df61d676bf553f16ed7612ca51c9599c4d42e1153ef1c18c8468e4d5ec247ebf60e8d6dfb7dd2dea9ae40b4fc48e93f53282771f71c159ef35ee1b8b43e3732e5f176733ff25ef4163a30b550031781ec92597badfc71a209895fccd67fe0c4dbb33322dce573b5060b84582864bb4e9e81eb6f143aa70746d7594146ff2e93deaccc3c3c5eb0ca17f2fe333ed6f1e7d8031a3cecd09932acf59ec64dbed27b44879c8b86608578563074366bb597a6b85114a21863d55219958a3e638f5590d00b10ac0cbf3e0abf99a03830810f2d69f248fd0f4d3507f2af93ed3b09bd65943159ae9f13c6fe20d5ab7b75d6572754421f2244930db473c945a41bf55bd004250a4003121f754fc8129d5fd87a5229622923499190075f2cd89ef67f62d8bdd5fac8a682e35470925a740bc086a9ed3f2b43941762a062a5b1e9a6b971845172dac73a597170bfae9439b3738387a2b529671c00348be19584e129b9825878a85553a37eefd5a2f392035f5080f42055f897cecdf68a3ed6a93c2dd4f1cb68f01b4a6fcc79fae3930624baa0cd691d222024a4c27a703f1e211b94bec143b92a714fae1db191201ae7fae10e2f372c281f9d70c418f17015da50905439061e3bcbdd52266e1c63effa1bdf138b250d5d0ad8df71761889cd4778da1984d20368dbb12647ba0d4f88a3ec75cd5b34dd704509b774dc17a4de2974992a9d6725d877a3eef599f6563fbfe0ee0bca3d7d1d5d4c50b35e885d38693fbc4a53d01342f445f99dce9f5aa49db462da532536c240150f007470e0efbaba9b3dfab58796756364da0ae592ff91c18b406aa2e81aa385b5121cadc01d77b1b5bb6b2facf3ffc75e4b9c447e7d213c35567e46283a9bb3aeff04f5f43177eb8662d1dddb93b87ee17a504005b0b169fee2142f6a424c89842ef246ac9801ca52782f74e1bde4e0020db709df956573d3027b5003f601ebed3f55a8122f9e5e9e36f63bba512fe7ca8b454eadf56c53400b4999e75dbcc908cd0ecee4a5617957cc8ae3c05b0f430dca4626cfb667c637392aa139039f3e4a9a586315ba0633e72aee614714a0b6ea8400a5c822536066d63af7f5d25116b941019b2b330b9e79423e93aa720513af0d61afafe05eb65b65972ce3dcead8bd3ee4325d4bbf0cb556fc1da41ba04310ff418cfa3caeb3672b966c120316d5be949d3443927dbba7c08ebf6c40e97a2a315a9a46091f6c244b5f662bf162213c8d3d8d7922345c0bdfea39c6a5bcdbfed660f7fcc66a1d915e80e1f5961d96012647bdb287d50f2dc01c4de583681b0da0fd60e654ff344f22918cb52b1942fa82de1fe8f713a67f5072490eeaba69c90e87222bcfd1733648b0792846bc83527870df6f87ed568b25a0645239a7add512fa711489321ed32be34148ec2e033c7efaffab92f63c954281e4b6ff0604f83d6487024149181a01880617e3da61c6e696a3a1be18e20a9d8549dac1da61a96163904d008382703026200067a2d8f07493a44bd89d6b4fa70014c006b4b2a7d97fd00ac06f5756bf17f4e4b3e9495212eba3477476873fd782f792ee57969aa904aefda06297c76fbb46d297d78291209d5b5aa814510cf5bc81b09993037cd89f3703a323d03efbeb2528b46a9df2128a5ff28d580c3f8e5bb7217c595de9b84e7ddce3b30e6b850d5874111d81b796c3a853788e4b44553a0893cc1ecaf55c123f518607b3d052682360665d739c751f0f4faadf5e8636d2712c4b0da4c7ed53a64272addf9443aa798473f8c0e419f08261bc2a445f8043b6aba827b3e59b8bc8a256a9d615f3d52aec170d316a38cac678ef5b149093b6cfa0df84dd4d64fcc5f370749cb8191e0ae53bf3b29a6e89f24118ae65b9b3ecfdb74355d2819e0c70eecec28684ddea54e657ac14df403df4ba70a9e172e182a4f9dcc21deb81a603763e56a79816e71e32da730c8ed4fd03b5eeb969a62737a1018b5c2b0c536d7e3fcc165d526dce61f7b5cff24605a7836e630091be710369545320baa98770cdbb07e89786049810bcd3ea90fe6c2f73a92bbce78745b1d882149f3817eada6e2163329ccab196ef0c0ccec09595c0298065b5f87170bce8cafb38660f8607905b5eb94378b5eb132855708e4bdc0ba0b627a117e4888c91017770ff5ff3d4953f412ba4f96d26057f428f9352dd100b7904166ddcc7890545ed836c420184915960dcd9eea9ea9f8bbed2ef1cd0fe301547fd56ee9ed7abfd4c1e4f0d2a439cef9902b4f0ee71e2563c09a70c4fb2c438eeda9b25e68a1d7f8135d0f7a7f8744360e0bb71fa3e7b939d6489166fa7d0ddb94d28110441b6e6c201bcccc87b1b4789cb9efd1b9539a544eedb49b0e9e91c3085bbdf3a4a1487d6a3fb6e8b462d543d45613b1c4a4a1f3734a348d29923724d4c5afdd5d5cf6dc86822137cf642d09329f7999df7d123ab9271bca88a08c1360890eaf85f06d5f67a48daf89ff3bc9438fffe1007cbf6fb06c6b5c72c182fe675cc294de4c3cff5dd567b87ec8449c3be175967580303987d54af083b3a1d783c5e48026742360697a935762dc85bb666f8d9f23b2c62c422caa0fa49e8c84733fd3bf7118d1a1efab96e4afd9652b130b63c4defc0dbba2ecafc20e346b43a4ee4f5918fb796e907c4faec150a0615916f6a300f06d27ad46ba282a8d4ba159a0ea0c8caa75a69bb53b282f703c381c6eea675512d1959ea5d08d96c604aaa2f3383a42368f6d0cef6ec6f536718ccee66dd2532c5da41428bae7a55989b8560034de24903386cd58374b5904c7d7f092a5e307bafb86ee7fef549b215bab0c99f053c3da9b40d3739a1acb5170f11de18acbe1343944f2614c169d4f7261d3f61a01a06b73ca57847ad638c49f3588ab24fba0f76ea61c09d0c707cb4297a0ed81611c62cbf32493b1be6d27687f09f916389f5e95d6bf7f6c665b164bd1d4f2ef167a43c2268036faaceafa4e64e9326695d7218c39de40e5b3343f788bd8392c28728bf831b2784f33b90606fde9184248aa4d47bec9aa4ba925248c1fb7781cca1ed77b5d4f2e6d9946ac3abdc52e50f140d0e5e47d431b6c1b83455ee7eddadc6aefad0745e5931c97820b50adf1dbb9325bd82d7c01d8c28e3c67ef653709511b563f84b2b5f3301f791ec55101f8b38d87377bfa22dd30a1cfc71f392f4543c3b7bd82d9fe88f0352e02a52677b04504947af3a842c99018dd7c5868ee8798245a6b7fbe75a18d6a89b37b5f08d9ddee356c722d02752efc5b2b755ca0039ad030210935f4f54ffe7e4569eaf05aa89b04b5a4cb3cd8d119cae39668822898e18f2532728c1198f0162b612d512b36c109ef8c8de77fa4fb606e0709593f194b7d4ba5210bd6bcfba624a0fe84cb7d575590e194b6a823a28c39a65fe593b48ed35bafbea3a5bf70e5481273e2e49b44645661d6be3a5229af1c85e0b5c9e18d4d85c72853db0570d850e49ab5d9ae6ca87fd5c48bbbff698664457030fbc1fe2afad5fbda9cbf4eb6744bc4977802fdab8a30376bf595df2bf2f5cfb2872f0ac3e90fb36bbe08f79929883a338a724f78fd48d76f56d322ff18e9e17b4ced519d1497f3d2731be95eb085ccbed659ef2954e37094e8464b64d798c9ceafa9df8d68780f05edb57dca8e51c3424b97cd3bbc976daa50afe8df803ebb5836d597f7a12b883593b57ade470cd448415b0e07426c69b28145c3a42f81a0c47f0c0ab58a5e136df6965346601514ab5a9ff55767e770f651bc024bbaae1b0ff32bcb90061583dcdf9d8c05a9309f193198803f6491e25387537999dd2c105447124a4a192724219eadddae6f2baed92bdb4102cf66a4dba931e1d71bc0339aca83f0b7e658ab5069c7d3e878e44c225c9806b53ccf1efea19551779acb49cf625215db40b079f8f780b212e206ed6d01769ef23fff0fd40dc7d2ef24901d464b77817b657501cd06ea92dfb1f477989612d3d86826442f34c5fdeec0a89b7eb0f40ca83c7c6344eab30b08391f6ffa75335325c04f42af9a1b5d10714be95b23a2a8b671f3603e12aec17d82e758782825bb539634f7323e5110cf3199af25616a1a9728487a05fefc593ce26513997ae00ecc45cfac15c84d74b294aba50fa0948c6fd0e0bee147e97b2bc7b7feb1d84a5cf346e4ffcde1df3ba8736522807fa0ff208f43c2ac26b1587e7e975da3202026541b63544eeb36bf36fa9d19f9d31b7bf2e78efd4db1a89a5c83455b13aad515e11bba170c1bf890854ca33865f9130376cb9ae728090d2ec32498aa45f490b37a5360f88456a281cf788e114a9ded854dd54241df4226d1605452752eb4265f002680a4fc0412fad075e97061f761c164125c7c1f6f50643b1fe20577fc83e399e66aebbc7eb752e3d7716c393e2977275f4f0fad3ab71d1603dabec433eba177c80415d84b1a07bf8f89aec08a5c8ed7f36716d3159bfaff9e2e4ace1a821c206c5058c4b4ef13b4c8d82cb4c86619dc5b5ed5259aa581d11ca312986b2d22a4a98d75730ecb84a9426832c74742fcb1b1fbd7e860161d943c0ed8495dc1352125a55b45498e3d2cfa949396abfa6315432ba056653414e81e74350bfa91d6f03866f9b9ef186f82313944eb87c86dfecb113a79fa6b37e4a1c24aedb6fefc386970eba2a34d15b839e493f9fcb9e62a0f3f004d310917f1e3545c60daf3b4b40f98908c75f96e20d4b5f4f40dc2e9a3c2281c948e4492b72bfaf74a22a658264d6b46ae933b2e306ed0f1f9e8f746a27df46ae2192cc619e6c5aac6a87fb5e2d2b680d8aa4d45a827f5a50f80ce0182eb53d201af07463daa60cd48fd243d53239b3eb1279aac4ec36c5f8bd08d534db826a079cd73228988a5192e2c5aa5ec7c2ca5ce4a3768abeace86591e40c55b6b140a0fb8234b08948116bebffc5b64369055f3dddde0ce93388e20917964b377c23a5e3b7335ba5b717d837376af456350ba31a72a812476a33d80ba2355eaef5ef5fed561c9ea6528db3770ef34d6c75b001dd166ecc6d8924b321b6f76633dcff80569b3d55e273134e4cff157489eb02955ec6e80f309738d6baac0af9ff79f1ac71171fc6d8bc1c2d680a847b5271bad4cd320d06276848c871a1744b4860f4297219df37f02475570ef48be9cebe51ed82d9ff62f97880f7f7ff78cd8f77cb5d0929281c29472c819d5446c52e5f12b6cf32762f602404541d36fcf565bc8e46eb40ecafa0dc60edf77738673807e27c39d6eb311cbb84e7e852c3ec1929a67efb674742703837a808e83d0bad4107206b8fdbe4f8a84bedabf8d20f91f8efb705e11b6d142337e5c8ee7fa02e61b9edc437cd54b0ae00ec7c62bcd42057fc9656a402ec5e3ae0e930c6f9e92c1bf9aafb2c60ee646d76177342f3383293362bd735c84a6da49edab87fa40f06849b4805e8ebceb0fff81840859ee278ad47993dcb3af5687ad339379250002bf7a001215d84c8b52bb8ef1cef26dfc7bbbf8ff240691d7b50343f3c3de7151fa4886c9c1d4e7b3f4c0081239c3f2be6820c2730adae004b9b7a293d93ac728b13900952424cf0823d27ecae8e3b691bbf15c34719177bba6818e761786406bcc46ffb367fcfe3accf15c3b1bfbc4861f43c137e943c3d4d49823a6f359f6381f64dcff3159410358a7694036ae56ec09aec901a9d5e2e7af1fa31a2bdf8dc2070215b8d8cee04e48efd600ae9abf33e287383c2f199c3d87698c27e2a2231a00e41803603d9c42ff182250184cd8c8dc1ad0377a3a122fbc7954e6d236bef2974f2b90455775b943b73a64970cf8606509c4c8a62208354cf2eed947aac55f74947ce02ba1e6323ad921d4a42fece53370df9c7a0390ce916ecf468bd5dfa4c8a7e297a5f081fdec8e949112a1419b268f7f33881992f8a9b776041d8a447748ae473a7a518d6a692b7e9eee4883c319b057aa3912cded9f111fb4929997b54bbb08ab6c9ff4fbdb8468c1d4fb748d035fdcfd79f0b6a01c958eba487c89bb7019fdcd2598c7b60eedda85ebc3ed42fbaeabf6f6dc73a448bf2faa3ec89cd93cda2f57dff269d7968dc222cf348b36160a6152a27a9372c11c1cee2f7d42dc3757a95902b85705e1ae744ac83f94d89dcc34134be091f4fbf796f45e7e73595fb4b7c09d697472f087b15b5fa6e86534562f10c6a26dbb8b60c81aedaff0486bd5d309931fcc09ac25e5bbad5ed9372ad7443a4602fee151d1649dc33a70dba8bf58b2eb805689ee73c4619f2e0aaddab32be6b749d1cff88c727b07be0061e0846b0ac0775a014e0ec6882875205a76cbd17507ae4c59409d27aec06f88753df8f47415035f0bee232141047168aa9f25c4e31c30e65cdda0f50b7b7d50515e51f75c102e4f0c7b4d3df1fa80b45e310b574c2c9bd6730e575e8f5558f1abe360a15e45ca3ef8ac4c609387fb9c52ecd3011f2965881c965413ee2306745b4b3e49442df93f2a43365e6fa6a7cd6d845d5128158e0e9f9dc1c50d4715163e33bd115fab76a22fe256f8351eccb464397edd083e54b1986334c47fc02a529b4797bbec5bc365daa6e62253e81069086c1140645a3257328ed29f875c4eaa8109e5721d64bbd500550e2ca64d9c8a3878e18c6a614b45752a06ae2917abe11663d5a63471dd3bfda6b13a1eb86297b122ef6677240a2f6b999d55dd16ad1602670b76b3857500e7f1d0f488557fa23799f225dc738b23af78c6f906239f16fa2784ac5e73ed00dcd34451ed1e1c36235231c458aedf5e740dc526ea7234d59a12a01b9dfe0852d5f55262db2b556e66bca9b00839f314c45ef3451f70d9167efa5c09b51a694943d5b39cb10aadf831520b4868d64738ffcc4402f30ba6e269c2012a073938af8141c16e07053e8006b37b638b1313b27e9f320b1adfec3290aa45f39aefcbaec388a6597e25bb0e6eaa4f02b2527d41489c3fd55263105ba20db3b6c45ace8473692b49b311fed47c273193a30abb9a69944b0e11021ab674cbe9fd0b03e88a3c432b5088a90d644c131150f78b52585c29154a933da80a202f5d550e7bbee9b5b459e30ea819d28b250fbeca8ff8d725be27d724e368b6d7ce2edfe954d84be1e2e93803fa7a7acfd12824ce15f59e44773b96e105e20f895d1c575be3d38e96cb5abd9068d348d120da734fbb82246c01a9570de3c5d9c5546b5cf99b1cdba4146d1f987e38e8f853e528ac64cfcde61495e571beaf51133cf4560b4afcc0c0371754a64d9f518bef9f22a36b971b9e929841a6bfff0b135593e14f4dc34faa2fb5cc55ab80b0ba02f4e9bbe7333ac6cc3e560bb9df462f7ea1a040137e7f453bdd1dfd025511d40938089b4bf19dea32cf3a1db57f800c3e79e29ed8b3eb18681ba20c48210c441bf614c01110b9ed3d7e7ec994e21585996ef2845b5837dea214a849a919e87114b5660284dad40877dc82dc648bb4e3cbfe28f511deb11f75c71ebaa0590ccbdc51e6cee8dc548e8a1362faf050c91d3a54bb138fe2c2f7bc44c491b5f15a949c62e6a825d1305af13b2bcc006b9626a9a7b7e8c987732fac5cc95343f528741834d234a2bfefcca052502833a3e1a3133262a6bee2d91f7d3e71f027cf2f781a108a178f61a871e5e483c08731be2ac069c788a2436b5f5999d8af8d620cb37b3d2bd557345c1c96184e138251409fd82bb85c258c4e26a2d385d00b17db9cc3eaf8ad0d902755d03f87c862df70c02274b73517e04dc94f00469517ba63457b4320afd5f10d3fca6999a737a475cf29ae937209bd3c7f3009dc8528766db7ee8421957d53d18d4dafa962ec38496aba6ecb297e07f138b0d349121cd8ab07cc1f41126e77278ab411f5efc1ca91fb4c9915715df7791d2410ce847d57a7644c88d14755f872ba0d86e8e8ca23f691ef41574b95f98f56fa0d51fe215aade888bb0f28fa23d4855558a2249082b1e5cc78d131bb9b83d255ba3f2770abca24e999205b486d3842097b3b8d5f27545600f445704995afd232243215df6f4902bab3d02a342208a530a1620314a9d06b88fb263af3236381d5ca2e0d755231424870b7d6a6949ef6bb29235d6f499179b4cacd32d1d4bb6edc13c5461dc4c33e16223eae5e1380a113bf7def75beb20758708671ca4a0182f6348ae4852f617555933cc45b48e728eff30e712b8cb49582dc56b12a900d714aa862280ebe6551a02462379fea9be49d98d08ae3f43e2e3a44432f196053d0f4cc05ce79c1d96266151240a928d1db27f007e336e55a144b9a061a030e8a06f52ceb2cb3a3b6a9712823523453ed387bac427fb5355407614ec23d490b640201ce6dfee14fca277bba578e4e8dfd826302f8bd6e3b9a8f4d37f41421bb5c64faf59a0e6f539216befb66d60de6b6e4a2bc8e64b8c2ce070be654400e9deb006c596c2c6fd41596d9c93f589a0aae4ff50e13d7ca6ad0dd5f16da09bc5666b67aadd893d1fadc07dd2c91ee77ef9bf9e37010cc439e02702b0b1c6aaea6cacbbba9fdf664796df89678aeed5d3dab0d7f0e4cb8bc94d9a4328986c1ad3aece890c5646ab56559b984f8e31a349ebfa2cc0243a42b178023802b213ca297870c9a759131187211e542672b45da8452df31831bd5347916a3da0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">wobuguan</span>
      </label>
    </div>
  </div>
</div>
<link href="/css/hbe.style.css" rel="stylesheet" type="text/css"><script data-swup-reload-script type="module" src="/js/plugins/hbe.js"></script>
<script data-swup-reload-script type="module">
import {initHBE} from "/js/plugins/hbe.js";
  console.log("hexo-blog-encrypt: loaded.");
    initHBE();
</script>
]]></content>
      <categories>
        <category>self</category>
      </categories>
  </entry>
  <entry>
    <title>go-inline-perf</title>
    <url>/2024/03/22/go-inline-perf/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>only-for-me</title>
    <url>/2017/06/08/only-for-me/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Infra 的创新悖论</title>
    <url>/2024/07/05/innovation-paradox/</url>
    <content><![CDATA[<h1 id="Infra-的创新悖论"><a href="#Infra-的创新悖论" class="headerlink" title="Infra 的创新悖论"></a>Infra 的创新悖论</h1><blockquote>
<p>我在内网看到的一篇帖子，写得真好，我觉得很好的描述了我在 Infra 部门工作遇到的所谓「创新悖论」，搬了过来。<br>所有敏感信息都已删除，如果原作者介意，请联系我删除🙏</p>
</blockquote>
<p>原标题：底层困境-精品不如新品，积累不如改变</p>
<p>好项目一旦被认可，就已经在迈向了死亡</p>
<p>每年一次的晋升制度需要RD小A在今年拥有亮眼的技术产出，当小A因为出色的项目A获得激励和晋升机会后，项目A从此便成为了小A手中一个食之无味弃之可惜的鸡肋。无论是从晋升、绩效还是经验的角度，他都很难再在来年用项目A获得多少利益。第二年他还要全力扑在项目A上吗？从0.8到0.9总比从0到0.8困难得多，也没意思得多。不如专注做个新东西，既能体现他的创造力、价值和产出，又能拓展他的经验和能力边界。此时把项目交出去便是小A最好的选择，即便不交出去，最好也只是稍作维护。<br>而通常情况下，小A都是能把项目交出去的，因为他的优秀和他的“创新意识”，同样能够给他的leader带来好处和惊喜；或许在有些情况下，放低项目A的优先级给小A腾出手来搞别的事情也正是来自leader的授意。此时，被安排去接手维护项目A的小B便成为了无奈又惨淡的那一个。对于他来说，这个项目连鸡肋都不如，是纯纯的鸡骨头。小B会把项目A做的越来越好吗？答案很明显，能被好好维护已经算是项目A的幸运了</p>
<p>项目A本来经过小A与用户磨合迭代后已经蛮好用了，好多一线开发人员都用的顺手；可后来给它提新功能它不乐意支持了，老功能也越来越不稳定，效率降低困扰增加，开发人员都在吐槽，此时小A的leader介意吗？有但不多：没关系，又不是不能用，确实也是没空管了，要不你们把项目接过去一起维护？没事儿，我们自己又不用，阻碍你们开发了？要是太紧急就把代码权限给你们开了一起排查排查？别急哈，新工具&#x2F;新框架已经在做了比这个更好用，要不你们现在就可以先试试，做我们第一批用户吧，享受vip服务哦～更糟糕的情况是开发人员也被传达自上而下的指令：老的别用了用新的工具&#x2F;框架吧，新的更好以后功能也更全。开发人员随手一试，这也不行那也不行啊怎么办啊领导？领导说没关系，这只是阵痛，你边用他们边给你改，很快就能行了！</p>
<p>这种状况是管理者们希望看到的吗，虽然从常理上来说，任何一个工程师应该都不希望事态如此发展。工欲善其事 必先利其器，大家希望用精且专的东西，而不是频繁切换磨合新工具。但从现实层面来说，很遗憾，这从上至下逐层的管理者之中，除去最顶部的两三层，应该有不少层都乐于如此。小A们给leader们带来了很多可以向上汇报的东西，这让leader们在他们的上级眼中看来，好像能够带领团队一直探索和前进，创新和突破。他们总是充满干劲，产出满满。他们有错吗？没有错，为什么不呢？适者生存，在这样的环境和制度之下，他们就是优胜者和利益倾斜方。造成这种评判结果的原因是这评断好坏的评委不是每一个工程师，这决定使用哪一个工具的决策者不是每一个一线开发人员，而是他们一层又一层的上级。  </p>
]]></content>
      <categories>
        <category>tech</category>
      </categories>
  </entry>
  <entry>
    <title>逃离北京？</title>
    <url>/2024/07/10/leave-peking/</url>
    <content><![CDATA[<h1 id="逃离北京？"><a href="#逃离北京？" class="headerlink" title="逃离北京？"></a>逃离北京？</h1><blockquote>
<p>为什么很少有北京市程序员，凭借个人努力挣几百万元存款后，立刻去三四线城市生活？<br>转自知乎回答：<a class="link"   href="https://www.zhihu.com/question/432359623/answer/3557716369" >https://www.zhihu.com/question/432359623/answer/3557716369<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>当然，没有版权问题，因为是我写的qaq<br>小水一篇博客</p>
</blockquote>
<p>想回答下这个问题，算是为大家提供一些经验教训。</p>
<p>22 年本科毕业的，毕业后一直在北京工作，算起来，练习时长也快到两年半了。</p>
<p>刚毕业的时候，作为一个穷学生机缘巧合下突然拿了大厂的 sp offer，彼时堪称雄心万丈，觉得自己薪资很高，起点也不错，必定能留在北京，买房定居，闯出一番事业。</p>
<p>23 年的时候，工作一度不太顺，尤其是从学生到职场的思维转变，举步维艰，不断踩坑；自己做的事情也不太能让自己满意；再加上组织架构动荡，业务困难等各种因素，开始变得灰心丧气，一直在质疑自己的能力，觉得自己的前景也就到这了。</p>
<p>现在想想，那时的一些观点还是太幼稚了，至少最核心的一点，自己的绩效一直没出过问题，只是不愿意接受在一些东西上事与愿违，再加上急躁，焦虑，不成熟，最终导致自己颇有些心灰意冷的感觉，斗志全无，只想当个怯战蜥蜴，</p>
<p>就是在那个时候正式动了去长沙的念头（我是湖南人），最终 23 年 10 月在长沙买了套房。说实话有点高位接盘的意思。但那个时候非常沮丧，一心只想离开北京；再加上觉得长沙的房价反正没多高，亏也亏不了多少；而且这套房子想用来自住；所以也没管那么多，也没做太多调研。最后买的价格是 1.37w&#x2F;平，131 平，首付加上各种乱七八糟的费用，花了差不多 65～70，没细算；此外商贷 120，4.0 的利率。一波花掉了手上所有的现金，还借点了，最穷的时候卡里 1000 块都没有了。好在每月房贷不高，我的公积金完全可以覆盖，还能剩下点补贴日用。</p>
<p>当时的计划就是，在北京混到 30 岁，省着点花钱，哪怕这些年一毛钱工资不涨，也基本能存够装修和房贷的钱（当然存够了也不一定要立马还），然后就找个合适的机会回长沙，能找到国企、事业单位、公务员自然最好，最差大不了去当保安，总之一定要轻松。不一定要结婚生子，更遑论一定要出人头地，只是单纯想当个烂人，觉得自己前 20 多年都没怎么好好为自己活过，想自由一点生活下去。</p>
<p>23 年底的时候跳了一次槽，比起刚毕业涨了些工资，新公司组里的整体氛围，工作强度其实都挺好的，我个人蛮喜欢的，而且对未来也开始变得更乐观的些，觉得自己也不完全一无是处，反而没那么强的回去的动力了。</p>
<p>加上北京房价也在跌，其实想想也不是买不起北京的房子，东坝，顺义，南五环这些地方，三到四百万整个 70 来平的房子，似乎也不是负担不起。但是沉没成本已经投入了，长沙的政策四年内房子不能出手，四年后的价格是怎么一回事还不知道。如果拿来自住，那降不降价无所谓，但如果卖掉长沙房产再北京买房，那就难顶了。</p>
<p>这些问题我也没想明白，我只是越发觉得人是永远不能预测未来的，因此走一步看一步吧。</p>
<p>总结下，于我而言，攒够钱不是什么太难的点，主要的问题在于：</p>
<ul>
<li>能否在长沙找到合适的工作，好歹轻松点的能养活自己吧</li>
<li>到时候还有没有回长沙的动力，如果那时候自我感觉发展的还不错，哪怕是一种假象，或许也很难有回去的动力</li>
<li>如何适应收入骤降，比如一个月的工资可能还没现在的公积金高？</li>
<li>想到了再补充……</li>
</ul>
<p>现在自己也不确定能不能达成自己的计划，希望吧。但人总是在不断成长，心态也一直在变的，所以我也不知道未来会发生什么。</p>
<p>如果有人看这个回答的话，持续更新下进展吧。</p>
]]></content>
      <categories>
        <category>daily</category>
      </categories>
  </entry>
</search>
