<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go GC 调优思路</title>
    <link href="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/"/>
    <url>/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/</url>
    
    <content type="html"><![CDATA[<h1 id="面向高性能的-Go-GC-调优思路"><a href="#面向高性能的-Go-GC-调优思路" class="headerlink" title="面向高性能的 Go GC 调优思路"></a>面向高性能的 Go GC 调优思路</h1><h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><p>最简单的优化思路是别浪费时间优化了，转 Rust，R 门！</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>FG 是一个纯内存计算服务，其特点是：核心数据使用 sync.map 存储，请求到达服务后，查询 map，进行计算并返回。服务拉起时启动一个协程定时从 DB 获取数据刷新此 map。</p><p>当前计算逻辑已优化到最佳，当前最大的性能瓶颈是 GC，由于 map 中存储了大量 k-v 对，且 value 是个复杂结构体，会逃逸到堆上，导致堆上存在大量可达的存活对象， GC Pause 较长，平均在几 ms 到几百 ms，且出现过 GC Pause 超过 1s 的极端场景。这带来的后果是：单实例吞吐量降低，时延优化受阻，时延毛刺多。</p><p>特点：高并发，核心读接口QPS100w+，单实例（16C32G） QPS 5k+，低时延：要求核心读接口 P99&lt;1ms。</p><p>目标：优化 GC，降低 GC Pause</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>使用 Pprof，查看火焰图以及堆使用情况，发现问题根源是堆上的大量存活对象，导致了：</p><ul><li>GC 标记阶段，待标记对象多，并行标记的线程占用大量 CPU 资源。</li><li>GC 清理阶段，待清理对象多，STW 时间增长。</li></ul><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>将 map 分为读写两个 map，并在完成数据刷新后交换。</p><h2 id="堆栈分析"><a href="#堆栈分析" class="headerlink" title="堆栈分析"></a>堆栈分析</h2><ul><li>写场景避免堆分配</li><li>读场景避免值复制</li></ul><h2 id="GC-逃逸"><a href="#GC-逃逸" class="headerlink" title="GC 逃逸"></a>GC 逃逸</h2><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><p>在服务拉起时，绕开语言 API，使用内核 API sys_mmap 直接向 OS 申请内存，自行管理此内存。</p><p>优势：这一片内存是根对象不可达的，Go Runtime 检测不到这一片内存，标记和清理压力会大幅降低。</p><p>劣势：需要手动管理内存。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>弃用标准库 map，自行实现 GCEscapeMap，使用 GCEscapeMap 作为核心数据的存储。</p><p>核心数据结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> GCEscapeMap[T any] <span class="hljs-keyword">struct</span> &#123;<br>s       []T<br>realCap <span class="hljs-type">int</span><br>realLen <span class="hljs-type">int</span><br>idxMap  <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>核心方法：向内核申请内存</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeSlice</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(<span class="hljs-built_in">len</span> <span class="hljs-type">int</span>)</span></span> reflect.SliceHeader &#123;<br>fd := <span class="hljs-number">-1</span><br><span class="hljs-keyword">var</span> t T<br>data, _, errno := syscall.Syscall6(<br>syscall.SYS_MMAP,<br><span class="hljs-number">0</span>, <span class="hljs-comment">// address</span><br><span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>)*unsafe.Sizeof(t),<br>syscall.PROT_READ|syscall.PROT_WRITE,<br>syscall.MAP_ANON|syscall.MAP_PRIVATE,<br><span class="hljs-type">uintptr</span>(fd), <span class="hljs-comment">// No file descriptor</span><br><span class="hljs-number">0</span>,           <span class="hljs-comment">// offset</span><br>)<br><span class="hljs-keyword">if</span> errno != <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">panic</span>(errno)<br>&#125;<br><br><span class="hljs-keyword">return</span> reflect.SliceHeader&#123;<br>Data: data,<br>Len:  <span class="hljs-built_in">len</span>,<br>Cap:  <span class="hljs-built_in">len</span>,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基于申请的内存初始化 GCEscapeMap</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// 初始化 GCEscapeMap</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewGCEscapeMap</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(<span class="hljs-built_in">cap</span> <span class="hljs-type">int</span>)</span></span> *GCEscapeMap[T] &#123;<br><span class="hljs-keyword">var</span> t T<br><span class="hljs-keyword">if</span> reflect.TypeOf(t).Kind() == reflect.Pointer &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;no ptr allowed&quot;</span>)<br>&#125;<br>data := makeSlice[T](<span class="hljs-built_in">cap</span>)<br>s := *(*[]T)(unsafe.Pointer(&amp;data))<br><span class="hljs-keyword">return</span> &amp;GCEscapeMap[T]&#123;s: s, realCap: <span class="hljs-built_in">cap</span>, realLen: <span class="hljs-number">0</span>, idxMap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>, <span class="hljs-built_in">cap</span>)&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读&amp;写 map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *GCEscapeMap[T])</span></span> Push(k <span class="hljs-type">int</span>, v T) &#123;<br>idx, ok := e.idxMap[k]<br><span class="hljs-keyword">if</span> ok &#123;<br>e.s[idx] = v<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>e.s[e.realLen] = v<br>e.realLen++<br>e.CheckAndScale()<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *GCEscapeMap[T])</span></span> Get(k <span class="hljs-type">int</span>) (*T, <span class="hljs-type">bool</span>) &#123;<br>idx, ok := e.idxMap[k]<br><span class="hljs-keyword">if</span> ok &#123;<br><span class="hljs-keyword">return</span> &amp;e.s[idx], <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>e.CheckAndScale(): 此方法用于检测 realLen 和 realCap 的比值，在超过「安全阈值」时会开始告警，在超过「扩容阈值」时会开始主动扩容并告警，其原理和 Slice 一致，如果主动扩容失败，将中止读写 map 交换并告警。 </p><p>需要指出的是，主动扩容是非常危险、代价非常高的操作，因此我们需要尽可能避免其出现：关注实例内存用量；关注 GCEscapeMap 当前用量。</p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>GCEscapeMap 包含以下成员：</p><ul><li>s 是数据真实存储的位置，由于其是直接向 OS 申请的，因此不会被 Runtime 扫描到。</li><li>realCap 和 realLen 用于控制 s 来实现类似 slice 的功能，因为 s 实际是定长的。</li><li>idxMap 是用于实现 map 能力的，其 k,v 都是 int，因此会被 Runtime 忽略（Go 1.5 开始提供此特性：<a href="https://go-review.googlesource.com/c/go/+/3288%EF%BC%89">https://go-review.googlesource.com/c/go/+/3288）</a></li></ul><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>我们使用 benchmark 来检验性能，并使用 Pprof 来观察堆情况</p><p>benchmark：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkEmap</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>m := emap.NewGCEscapeMap(<span class="hljs-number">2000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m.Push(i, TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;)<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>m.Get(i)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkNormalMap</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]emap.Aim, <span class="hljs-number">1000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m[i] = TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>_ = m[i]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/img.png" class="" title="Benchmark 结果"><p>Pprof</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>_ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>http.ListenAndServe(<span class="hljs-string">&quot;0.0.0.0:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;()<br>time.Sleep(time.Second)<br>UseGCEscapeMap()<br><span class="hljs-comment">//UseNormalMap()</span><br>time.Sleep(<span class="hljs-number">1000</span> * time.Second)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UseGCEscapeMap</span><span class="hljs-params">()</span></span> &#123;<br>m := emap.NewGCEscapeMap[TestAim](<span class="hljs-number">2000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m.Push(i, TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>st := time.Now()<br>runtime.GC()<br>fmt.Printf(<span class="hljs-string">&quot;GC took %s\n&quot;</span>, time.Since(st))<br>time.Sleep(time.Second)<br>&#125;<br><br>runtime.KeepAlive(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UseNormalMap</span><span class="hljs-params">()</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]TestAim, <span class="hljs-number">1000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m[i] = TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>st := time.Now()<br>runtime.GC()<br>fmt.Printf(<span class="hljs-string">&quot;GC took %s\n&quot;</span>, time.Since(st))<br>time.Sleep(time.Second)<br>&#125;<br><br>runtime.KeepAlive(m)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>UseGCEscapeMap：</p><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/stdout-em.png" class="" title="UseGCEscapeMap输出结果"><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/heap-status-em.png" class="" title="UseGCEscapeMap堆状态"><p>UseNormalMap:</p><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/stdout-nm.png" class="" title="UseNormalMap输出结果"><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/heap-status-nm.png" class="" title="UseNormalMap堆状态">]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>End&amp;Start</title>
    <link href="/2024/02/23/End-Start/"/>
    <url>/2024/02/23/End-Start/</url>
    
    <content type="html"><![CDATA[<h1 id="End-Start"><a href="#End-Start" class="headerlink" title="End&amp;Start"></a>End&amp;Start</h1><p>立个 flag：这个周末写点东西～</p>]]></content>
    
    
    <categories>
      
      <category>Life</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hello-world</title>
    <link href="/2024/01/25/hello-world/"/>
    <url>/2024/01/25/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Hyphen"><a href="#Hyphen" class="headerlink" title="Hyphen"></a>Hyphen</h1><p>This is a Hello World page</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello Wolrd!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
