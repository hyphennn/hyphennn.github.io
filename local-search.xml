<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2025</title>
    <link href="/2025/01/01/2025-hello/"/>
    <url>/2025/01/01/2025-hello/</url>
    
    <content type="html"><![CDATA[<p>2024 大抵又是重复的一年，很想在最后写点什么东西，却只是坐在电脑前发了很久的呆，不知该从何处下笔。</p><p>工作后很多事情似乎逐渐的重复、无趣了。过往的欲望逐步得到了满足，又生出新的欲望，以为自己走到了终点，却又重回到原点，忘记痛苦，重复错误，此般轮回往复，看不到尽头。</p><p>我总是尝试找到一个尽头，却又总是陷入对经验的解构与愿景的建构，左支右绌，难以在此间达成平衡。但我想，我还是需要在未来找寻它，以此来实现自我价值的变革与重建。</p><p>古人说，十五而有志于学，三十而立。二十五岁的我偏偏卡在中间，满腹志气却又无能为力。</p><p>最后，请让我仍然以年少时最爱的尼采结尾吧——</p><p>今天一首快乐的颂歌也这样响起，奉献给超越生死的主，你对他永怀赞美与感激，他以他的恩宠，给了你一个新的年度。</p>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>逃离北京？</title>
    <link href="/2024/07/10/leave-peking/"/>
    <url>/2024/07/10/leave-peking/</url>
    
    <content type="html"><![CDATA[<h1 id="逃离北京？"><a href="#逃离北京？" class="headerlink" title="逃离北京？"></a>逃离北京？</h1><blockquote><p>为什么很少有北京市程序员，凭借个人努力挣几百万元存款后，立刻去三四线城市生活？<br>转自知乎回答：<a href="https://www.zhihu.com/question/432359623/answer/3557716369">https://www.zhihu.com/question/432359623/answer/3557716369</a><br>当然，没有版权问题，因为是我写的qaq<br>小水一篇博客</p></blockquote><p>想回答下这个问题，算是为大家提供一些经验教训。</p><p>22 年本科毕业的，毕业后一直在北京工作，算起来，练习时长也快到两年半了。</p><p>刚毕业的时候，作为一个穷学生机缘巧合下突然拿了大厂的 sp offer，彼时堪称雄心万丈，觉得自己薪资很高，起点也不错，必定能留在北京，买房定居，闯出一番事业。</p><p>23 年的时候，工作一度不太顺，尤其是从学生到职场的思维转变，举步维艰，不断踩坑；自己做的事情也不太能让自己满意；再加上组织架构动荡，业务困难等各种因素，开始变得灰心丧气，一直在质疑自己的能力，觉得自己的前景也就到这了。</p><p>现在想想，那时的一些观点还是太幼稚了，至少最核心的一点，自己的绩效一直没出过问题，只是不愿意接受在一些东西上事与愿违，再加上急躁，焦虑，不成熟，最终导致自己颇有些心灰意冷的感觉，斗志全无，只想当个怯战蜥蜴，</p><p>就是在那个时候正式动了去长沙的念头（我是湖南人），最终 23 年 10 月在长沙买了套房。说实话有点高位接盘的意思。但那个时候非常沮丧，一心只想离开北京；再加上觉得长沙的房价反正没多高，亏也亏不了多少；而且这套房子想用来自住；所以也没管那么多，也没做太多调研。最后买的价格是 1.37w&#x2F;平，131 平，首付加上各种乱七八糟的费用，花了差不多 65～70，没细算；此外商贷 120，4.0 的利率。一波花掉了手上所有的现金，还借点了，最穷的时候卡里 1000 块都没有了。好在每月房贷不高，我的公积金完全可以覆盖，还能剩下点补贴日用。</p><p>当时的计划就是，在北京混到 30 岁，省着点花钱，哪怕这些年一毛钱工资不涨，也基本能存够装修和房贷的钱（当然存够了也不一定要立马还），然后就找个合适的机会回长沙，能找到国企、事业单位、公务员自然最好，最差大不了去当保安，总之一定要轻松。不一定要结婚生子，更遑论一定要出人头地，只是单纯想当个烂人，觉得自己前 20 多年都没怎么好好为自己活过，想自由一点生活下去。</p><p>23 年底的时候跳了一次槽，比起刚毕业涨了些工资，新公司组里的整体氛围，工作强度其实都挺好的，我个人蛮喜欢的，而且对未来也开始变得更乐观的些，觉得自己也不完全一无是处，反而没那么强的回去的动力了。</p><p>加上北京房价也在跌，其实想想也不是买不起北京的房子，东坝，顺义，南五环这些地方，三到四百万整个 70 来平的房子，似乎也不是负担不起。但是沉没成本已经投入了，长沙的政策四年内房子不能出手，四年后的价格是怎么一回事还不知道。如果拿来自住，那降不降价无所谓，但如果卖掉长沙房产再北京买房，那就难顶了。</p><p>这些问题我也没想明白，我只是越发觉得人是永远不能预测未来的，因此走一步看一步吧。</p><p>总结下，于我而言，攒够钱不是什么太难的点，主要的问题在于：</p><ul><li>能否在长沙找到合适的工作，好歹轻松点的能养活自己吧</li><li>到时候还有没有回长沙的动力，如果那时候自我感觉发展的还不错，哪怕是一种假象，或许也很难有回去的动力</li><li>如何适应收入骤降，比如一个月的工资可能还没现在的公积金高？</li><li>想到了再补充……</li></ul><p>现在自己也不确定能不能达成自己的计划，希望吧。但人总是在不断成长，心态也一直在变的，所以我也不知道未来会发生什么。</p><p>如果有人看这个回答的话，持续更新下进展吧。</p>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Infra 的创新悖论</title>
    <link href="/2024/07/05/innovation-paradox/"/>
    <url>/2024/07/05/innovation-paradox/</url>
    
    <content type="html"><![CDATA[<h1 id="Infra-的创新悖论"><a href="#Infra-的创新悖论" class="headerlink" title="Infra 的创新悖论"></a>Infra 的创新悖论</h1><blockquote><p>我在内网看到的一篇帖子，写得真好，我觉得很好的描述了我在 Infra 部门工作遇到的所谓「创新悖论」，搬了过来。<br>所有敏感信息都已删除，如果原作者介意，请联系我删除🙏</p></blockquote><p>原标题：底层困境-精品不如新品，积累不如改变</p><p>好项目一旦被认可，就已经在迈向了死亡</p><p>每年一次的晋升制度需要RD小A在今年拥有亮眼的技术产出，当小A因为出色的项目A获得激励和晋升机会后，项目A从此便成为了小A手中一个食之无味弃之可惜的鸡肋。无论是从晋升、绩效还是经验的角度，他都很难再在来年用项目A获得多少利益。第二年他还要全力扑在项目A上吗？从0.8到0.9总比从0到0.8困难得多，也没意思得多。不如专注做个新东西，既能体现他的创造力、价值和产出，又能拓展他的经验和能力边界。此时把项目交出去便是小A最好的选择，即便不交出去，最好也只是稍作维护。<br>而通常情况下，小A都是能把项目交出去的，因为他的优秀和他的“创新意识”，同样能够给他的leader带来好处和惊喜；或许在有些情况下，放低项目A的优先级给小A腾出手来搞别的事情也正是来自leader的授意。此时，被安排去接手维护项目A的小B便成为了无奈又惨淡的那一个。对于他来说，这个项目连鸡肋都不如，是纯纯的鸡骨头。小B会把项目A做的越来越好吗？答案很明显，能被好好维护已经算是项目A的幸运了</p><p>项目A本来经过小A与用户磨合迭代后已经蛮好用了，好多一线开发人员都用的顺手；可后来给它提新功能它不乐意支持了，老功能也越来越不稳定，效率降低困扰增加，开发人员都在吐槽，此时小A的leader介意吗？有但不多：没关系，又不是不能用，确实也是没空管了，要不你们把项目接过去一起维护？没事儿，我们自己又不用，阻碍你们开发了？要是太紧急就把代码权限给你们开了一起排查排查？别急哈，新工具&#x2F;新框架已经在做了比这个更好用，要不你们现在就可以先试试，做我们第一批用户吧，享受vip服务哦～更糟糕的情况是开发人员也被传达自上而下的指令：老的别用了用新的工具&#x2F;框架吧，新的更好以后功能也更全。开发人员随手一试，这也不行那也不行啊怎么办啊领导？领导说没关系，这只是阵痛，你边用他们边给你改，很快就能行了！</p><p>这种状况是管理者们希望看到的吗，虽然从常理上来说，任何一个工程师应该都不希望事态如此发展。工欲善其事 必先利其器，大家希望用精且专的东西，而不是频繁切换磨合新工具。但从现实层面来说，很遗憾，这从上至下逐层的管理者之中，除去最顶部的两三层，应该有不少层都乐于如此。小A们给leader们带来了很多可以向上汇报的东西，这让leader们在他们的上级眼中看来，好像能够带领团队一直探索和前进，创新和突破。他们总是充满干劲，产出满满。他们有错吗？没有错，为什么不呢？适者生存，在这样的环境和制度之下，他们就是优胜者和利益倾斜方。造成这种评判结果的原因是这评断好坏的评委不是每一个工程师，这决定使用哪一个工具的决策者不是每一个一线开发人员，而是他们一层又一层的上级。  </p>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Go defer+闭包的一个小坑</title>
    <link href="/2024/06/07/go-defer-closure/"/>
    <url>/2024/06/07/go-defer-closure/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-defer-闭包的一个小坑"><a href="#Go-defer-闭包的一个小坑" class="headerlink" title="Go defer+闭包的一个小坑"></a>Go defer+闭包的一个小坑</h1><p>今天在写代码的时候，发现一个奇怪的事情，在将无效的逻辑简化之后，可以总结出这样的一段代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>a := <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;defer only: &quot;</span> + a)<br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; fmt.Println(<span class="hljs-string">&quot;defer closure: &quot;</span> + a) &#125;()<br><br>a = <span class="hljs-string">&quot;2&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>先让我们想一想，这段代码的输出是什么？我的之前的理解中，显然，这是问 defer 的执行顺序问题，那太简单了，毫无疑问应该输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">defer closure: 1<br>defer only: 1<br></code></pre></td></tr></table></figure><p>然而，真的执行这段代码之后，我惊讶的发现，真实的输出是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">defer closure: 2<br>defer only: 1<br></code></pre></td></tr></table></figure><p>这就有些让我费解了，正好借着这个机会，我对 defer&amp; 闭包做了一次系统的整理。</p><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><h3 id="预计算"><a href="#预计算" class="headerlink" title="预计算"></a>预计算</h3><p>Go 官方文档对此由如下<a href="">阐述</a></p><p>to be finished</p>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Go Vendor-时代的眼泪</title>
    <link href="/2024/05/22/go-vendor/"/>
    <url>/2024/05/22/go-vendor/</url>
    
    <content type="html"><![CDATA[<h1 id="Go-Vendor"><a href="#Go-Vendor" class="headerlink" title="Go Vendor"></a>Go Vendor</h1><p>go vendor 也算时代的眼泪了，在 go1.5～1.11 之间被相对广泛的使用，在 1.11之后基本就退出历史舞台了，原因无他，go module 太好用了。 即便政治正确一点地说，它和 cargo、bazel 相比功能上没有那么丰富，但其轻量、简便在包管理工具中也难寻其右。</p><p>事实上，在我 21 年开始接触 Go 时，主流 Go 版本已经来到 1.16，因此我从未接触过 vendor 项目， 甚至连 GOPATH 也不用太了解。 不过，既然是时代的眼泪，vendor 就一定还留着其泪痕。</p><p>跳槽之后，新工作的核心仓库，是一个 14 年就开始的古老项目，现在还留着不少针对 go1.5 的条件编译代码和汇编。此仓库主打一个历史悠久， 历经古法包管理（直接复制仓库）、bazel、vendor 等多个模式，并且由于这些模式的混杂导致至今未能升级到 go module，此外， go 版本也停留在 go1.12，主要也没啥人敢升，一来没产出，二来容易出问题。虽说程序员和代码有一个能跑就行，但现在的大环境，程序员怕是不太好跑。</p><p>因此，为了开发这个仓库，我对 go vendor 进行了相对深入的了解，记录一下。</p><h2 id="GOPATH"><a href="#GOPATH" class="headerlink" title="GOPATH"></a>GOPATH</h2><p>GOPATH 是「标记 Go 代码工作区」的环境变量，一般来说，GOPATH 下应该有三个子文件夹：bin、pkg、src，对应了主要的三个功能：</p><ul><li>标记 go 二进制地址。通过 go install&#x2F;go get 安装的二进制文件，会放在 $GOPATH&#x2F;bin 中，此规范始终是生效的。</li><li>标记依赖包地址。在启用 go module 之后，go module 会将下载的依赖包放到 $GOPATH&#x2F;pkg 中，并且加上版本 tag 以及 sum 信息。自然，此规范是在启用 go module 之后才有效。</li><li>标记源码地址。这个主要是针对 vendor 模式，在下面会细讲，在 module 模式下已经事实上不再需要了吗，也不再有目录规范，当前源码想放哪就放哪，不过通常会基于历史习惯放到 src 下，但比如 Goland 新建项目则会默认放到 GolandProject 下。</li></ul><p>简单总结下：在 module 模式下，GOPATH 下的两个主要功能：bin&amp;pkg 都是由 go tools 自动管理的，对于程序员而言几乎不再需要被关注。</p><h2 id="Vendor"><a href="#Vendor" class="headerlink" title="Vendor"></a>Vendor</h2><p>Vendor 模式是在 Go 早期没有包管理的野蛮发展下形成的一个社区实践，并在 1.5 被正式纳入语言特性，1.13 结束生命周期。 Vendor 其实很简单，和 node_modules 差不太多，本质上都是「约定一个目录存放第三方包」，这个目录便是 vendor。</p><p>让我们以一个例子开始。假如你创建了一个项目，这个项目目前为止只使用了标准库，我们知道标准库在 GOROOT 下保存，那么，你们的代码只需要在 GOPATH&#x2F;src 下挂着就行了，当然，原则上来说你挂哪都行，甚至根目录也无所谓，大不了临时改一下 $GOPATH。</p><p>不过，我们都是习惯良好的工程师，为了方便管理手上的诸多项目，我们决定固定 GOPATH，并且按照项目名称进行良好的目录层级划分，就像 JAVA 那样（先让我们这么做，后面我们会明白这么做的好处的，良好的习惯总是会有回报的），我们假定这个项目叫 github.com&#x2F;hyphennn&#x2F;proj1，于是，你的目录如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">$GOPATH<br>    - bin<br>    - src<br>        - github.com<br>            - hyphennn<br>                - proj1 // 下面的层级是你的源代码<br></code></pre></td></tr></table></figure><p>接下来，让我们迭代这个项目，以及项目中的包管理机制</p><h3 id="版本一-GOPATH-机制"><a href="#版本一-GOPATH-机制" class="headerlink" title="版本一 GOPATH 机制"></a>版本一 GOPATH 机制</h3><p>现在，我们决定引入某一个功能，这个功能我们曾经写过，只不过在 github.com&#x2F;hyphennn&#x2F;proj2 这个项目中，假定代码在 github.com&#x2F;hyphennn&#x2F;proj2&#x2F;waibiwaibi&#x2F;waibibabo.go 这个文件里面，自然地，复制过去是个好想法，但假如这个文件依赖了项目中的其他文件呢？都复制过去吗？要是变量名、方法名有冲突咋办？更进一步的，以后 proj2 继续迭代，难道改一次代码就复制一次吗？这显然不合理。事实上，Go 提供了解决方案，你可以如下组织你的代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">$GOPATH<br>    - bin<br>    - src<br>        - github.com<br>            - hyphennn<br>                - proj1 // 下面的层级是你的源代码<br>                - proj2<br></code></pre></td></tr></table></figure><p>这样，你只需要 import 一下就好了：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;github.com/hyphennn/proj2/waibiwaibi&quot;</span><br></code></pre></td></tr></table></figure><p>这种方式是很直观的，因为你引用项目内其他文件夹时你也是这么做的，当项目中被声明 import “xxx” 时，编译器会去寻找 GOPATH&#x2F;src&#x2F;xxx，如果找到，就会将其作为依赖库加入编译。当然，会优先在 $GOROOT 下找标准库。</p><p>项目跑的很不错，现在该添加新的功能了。功能太复杂，人力成本非常有限，不过好消息是我们找到了两个来自互联网的包，帮助我们解决了问题，他们分别是：github.com&#x2F;helper1&#x2F;pkg1 和 golang.org&#x2F;helper2&#x2F;pkg2。怎么把这两个包引入呢？一个很直观的思路就是：像使用我们自己的项目一样使用这两个包，参照一下上面 import 寻找目标的原理，我们能很轻易的给出如下目录：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs text">$GOPATH<br>    - bin<br>    - src<br>        - github.com<br>            - hyphennn<br>                - proj1 // 下面的层级是你的源代码<br>                - proj2<br>            - helper1<br>                - pkg1<br>        - golang.org<br>            - helper2<br>                -pkg2<br></code></pre></td></tr></table></figure><p>同样的，import 语句如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span>(<br>    <span class="hljs-string">&quot;github.com/hyphennn/proj2/waibiwaibi&quot;</span><br>    <span class="hljs-string">&quot;github.com/helper1/pkg1&quot;</span> <span class="hljs-comment">// 让我们省略掉后面的子目录，毕竟都差不多</span><br>    <span class="hljs-string">&quot;golang.org/helper2/pkg2&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>尝试一下，运行良好，以后就这么干，可以不断引入新的包。</p><p>到此为止，我们完成了第一版的包管理机制，严格来说并不叫包管理，因为它完全依赖 GOPATH，不过这不重要，我们的项目很棒，赚大钱了(bushi</p><h3 id="版本二-Vendor-机制"><a href="#版本二-Vendor-机制" class="headerlink" title="版本二 Vendor 机制"></a>版本二 Vendor 机制</h3><p>如果你了解过包管理工具，以及构建工程，显然，GOPATH 不是个好的方案，它至少有如下缺点：</p><ul><li>自己编写的包，和网络上的第三方包，都放置在GOPATH&#x2F;src下，容易造成混乱，不方便管理。</li><li>项目中用到的依赖包，都需要手动go get下载，大项目来说非常麻烦</li><li>如果引入的三方包中又引入了其他三方包，就不好处理了，需要找到以后，使用go get去下载。</li><li>go get没有版本的概念，团队合作中，很容易出现使用了不同版本的包，造成不必要的错误。</li><li>协作开发时，需要统一各个开发成员本地$GOPATH&#x2F;src下的依赖包。</li><li>引用的包引用了已经转移的包，而作者没改的话，需要自己修改引用。</li></ul><p>让我们想想别的工具怎么解决的。Go 作为世界上第二好的语言，不妨学习下世界上最好的语言-PHP。PHP 使用 Composer 作为包管理器，将第三方包放到根目录下的一个名为 vendor 的目录下。好主意，让我们融会贯通下，制订 Go 的 vendor 机制。</p><blockquote><p>当然，需要指出的是，我根本不清楚 Go Vendor 的起源，以上只是为了告诉大家世界上最好的语言是 PHP。</p></blockquote><p>首先，我们把要求团队把所有的依赖包都放到一个叫做 vendor 的目录，这一步有点像 js 著名（<del>臭名昭著</del>）的 node_modules。不过，由于不同域名、仓库组下的仓库是可以同名的，因此，我们仍然要求在 vendor 下按照层级放置依赖包（就像 GOPATH 里面的那样）。由此，我们解决了「无法区分自有仓库和第三方依赖」的问题，在 vendor 下的是第三方依赖，GOPATH 下的是自有。</p><p>其次，我们要求代码仓库上传的时候把 vendor 带上，虽然这会一定程度使得代码仓库体积更大，但这无非增加点碳排放和代码仓库组同事的工作量罢了，却能很好的解决「手动下载依赖包」带来的诸多问题，这对我们当然是可接受的（代码仓库组同事：你礼貌吗。</p><p>最后，我们允许一个项目中存在多个 vendor 目录，他们位于不同的目录下，影响着不同目录的依赖，此规则的优势或许难以直观地看出，但使用过程中我们会发现它的好处的。这可能有点绕，我们举个例子，我们的项目 repo 依赖 pkg1, pkg2 和 pkg3，他们的目录分别如下：repo&#x2F;module1&#x2F;vendor&#x2F;pkg1，repo&#x2F;module2&#x2F;vendor&#x2F;pkg2，repo&#x2F;vendor&#x2F;pkg3。那么，你在 repo&#x2F;module1&#x2F; 下可以 import pkg1, pkg3，在 repo&#x2F;module2&#x2F; 下可以 import pkg2, pkg3，在 repo&#x2F; 和 repo&#x2F;module3 下则只能 import pkg3。此外，我们还允许在 GOPATH&#x2F;src 下的每一级目录（包括 src）都有 vendor，最终寻找依赖的规则在下文中列出。</p><p>以上，我们解决了一部分问题，至于剩下的问题，让我们相信后人的智慧吧，大家都喜欢这么做，我们自然也可以～</p><p>最终，我们形成了如下的一组规则，这便是 Vendor 机制：</p><ul><li>将依赖包统一放到一个叫 vendor 的目录下，并遵循：<ul><li>可以有多个不同目录下的 vendor，其作用域满足下面的查找规则</li><li>上传项目的时候应该将 vendor 一并传到代码仓库中</li><li>单个 vendor 目录下的包放置目录规则和 GOPATH 一致，就像 vendor 目录是 $GOPATH&#x2F;src 一样</li><li>vendor 目录仅作为依赖包使用</li></ul></li><li>查找规则<ul><li>在遇到 import 语句时（非标准库），首先查找当前包下的 vendor 目录</li><li>向上级目录查找，直到找到 src 下的 vendor 目录</li><li>在 GOROOT 目录下查找</li><li>在 GOPATH 下面查找依赖包</li></ul></li></ul><p>基于上述规则，我们调整项目如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs text">$GOPATH<br>    - bin<br>    - vendor<br>        github.com<br>            - helper8<br>                - pkg10<br>                - pkg11<br>    - src<br>        - github.com<br>            - hyphennn<br>                - proj1 // 下面的层级是你的源代码<br>                    - 其他代码<br>                    - vendor<br>                        - github.com<br>                            - helper1<br>                                - pkg1<br>                                - pkg2<br>                            - helper2<br>                                - pkg3<br>                                - pkg4<br>                        - golang.org<br>                            - helper3<br>                                - pkg4<br>                            - helper4<br>                                - pkg5<br>                                - pkg6<br>                - proj2<br>                    - vendor<br>                        - github.com<br>                            - helper2<br>                                - pkg3<br>                                - pkg4<br>                        - golang.org<br>                            - helper3<br>                                - pkg4<br>            - vendor<br>                - github.com<br>                    - helper5<br>                        - pkg6<br>                        - pkg7<br>        - golang.org<br>            - helper2<br>                -pkg2<br></code></pre></td></tr></table></figure><p>其中的逻辑看起来可能有些绕，这里地方太小，写不下（绝对不是懒</p><p>按照上面说的规则，去理解一下，整体还是非常清晰的。</p><h3 id="版本三-Module-机制"><a href="#版本三-Module-机制" class="headerlink" title="版本三 Module 机制"></a>版本三 Module 机制</h3><p>Vendor 当然有各种缺点，于是 Module 机制出现了，并且良好地运行至今。介绍 Module 的文章太多了，这里就不班门弄斧了～</p><h2 id="govendor"><a href="#govendor" class="headerlink" title="govendor"></a>govendor</h2><p><a href="https://github.com/kardianos/govendor">govendor</a> 是一个应用比较广泛的项目，主要目标是解决「vendor 目录过于占用空间」和「vendor 目录难以管理依赖包版本」的问题，一定程度上成为了 Go 包管理的事实标准。如今此项目已经不再维护了，也不接收任何新的 PR，但仍然不妨碍我们了解一下。</p><p>govendor 的思路有些像 npm，核心是：不再直接管理依赖包文件，而是使用 vendor.json 的文件来记录依赖包的元信息，是的，这个思路和 package.json 甚至 go.mod 都是非常相似的。使用 govendor 后，原来存放诸多依赖包的 vendor 目录下只需要放置一个 vendor.json 文件，由 govendor 提供的命令行工具维护此文件以及基于此文件下载依赖包。下面给出一个元信息的实例：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">&#123;<br>  &quot;checksumSHA1&quot;: &quot;GcaTbmmzSGqTb2X6qnNtmDyew1Q=&quot;,<br>  &quot;path&quot;: &quot;github.com/pkg/errors&quot;,<br>  &quot;revision&quot;: &quot;a2d6902c6d2a2f194eb3fb474981ab7867c81505&quot;,<br>  &quot;revisionTime&quot;: &quot;2016-06-27T22:23:52Z&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>从此实例中就可以大体明白 govendor 的工作原理了，并不算非常复杂，我想大约也是因此 govendor 才广受欢迎。</p><p>使用 govendor 后，我们项目的目录便可以简化如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs text">$GOPATH<br>    - bin<br>    - vendor<br>        github.com<br>            - vendor.json<br>    - src<br>        - github.com<br>            - hyphennn<br>                - proj1 // 下面的层级是你的源代码<br>                    - 其他代码<br>                    - vendor<br>                        - vendor.json<br>                - proj2<br>                    - vendor<br>                        - vendor.json<br>            - vendor<br>                - vendor.json<br>        - golang.org<br>            - helper2<br>                -pkg2<br></code></pre></td></tr></table></figure><p>govendor 提供如下的命令参数，含义参照一下解释就能大致理清楚：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs text">&lt;sub-command&gt;<br>init     Create the &quot;vendor&quot; folder and the &quot;vendor.json&quot; file.<br>list     List and filter existing dependencies and packages.<br>add      Add packages from $GOPATH.<br>update   Update packages from $GOPATH.<br>remove   Remove packages from the vendor folder.<br>status   Lists any packages missing, out-of-date, or modified locally.<br>fetch    Add new or update vendor folder packages from remote repository.<br>sync     Pull packages into vendor folder from remote repository with revisions<br>               from vendor.json file.<br>migrate  Move packages from a legacy tool to the vendor folder with metadata.<br>get      Like &quot;go get&quot; but copies dependencies into a &quot;vendor&quot; folder.<br>license  List discovered licenses for the given status or import paths.<br>shell    Run a &quot;shell&quot; to make multiple sub-commands more efficient for large<br>             projects.<br><br>go tool commands that are wrapped:<br>  `+&lt;status&gt;` package selection may be used with them<br>fmt, build, install, clean, test, vet, generate, tool<br><br>&lt;status&gt;<br>+local    (l) packages in your project<br>+external (e) referenced packages in GOPATH but not in current project<br>+vendor   (v) packages in the vendor folder<br>+std      (s) packages in the standard library<br><br>+excluded (x) external packages explicitly excluded from vendoring<br>+unused   (u) packages in the vendor folder, but unused<br>+missing  (m) referenced packages but not found<br><br>+program  (p) package is a main package<br><br>+outside  +external +missing<br>+all      +all packages<br></code></pre></td></tr></table></figure><p>不过，govendor 由于已经不再维护了，因此其在 M 系列芯片的 Mac 上不可用，而且也不清楚高版本 Go 的兼容性。</p><p>由于工作项目需要使用 govendor，因此我复制了一份代码，处理了部分兼容性问题，目前在我本地（Mac M2）看起来没啥问题。地址：<a href="https://github.com/hyphennn/govendor">https://github.com/hyphennn/govendor</a> 。但不清楚有没有未知问题。<br>ps. 之所以不 fork，是因为原项目不再维护了，fork 没有任何意义。</p>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Bazel-Next Generation of Build?</title>
    <link href="/2024/04/22/bazel-1/"/>
    <url>/2024/04/22/bazel-1/</url>
    
    <content type="html"><![CDATA[<h1 id="Bazel-Next-Generation-of-Build"><a href="#Bazel-Next-Generation-of-Build" class="headerlink" title="Bazel: Next Generation of Build?"></a>Bazel: Next Generation of Build?</h1><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>Bazel 是 Google 开源的一款与 Make、Maven 和 Gradle 类似的开源构建和测试工具， 它使用人类可读的高级构建语言 Starlark，支持多种语言，可为多个平台构建输出。 Bazel 支持任意大小的构建目标，并支持跨多个代码库和大量用户的大型代码库，是 Google 主推的一种构建工具。</p><h3 id="Bazel-与其他构建工具的区别"><a href="#Bazel-与其他构建工具的区别" class="headerlink" title="Bazel 与其他构建工具的区别"></a>Bazel 与其他构建工具的区别</h3><ul><li>基于任务（task）的构建系统</li></ul><p>在基于任务的构建系统中，基本的工作单元是任务。每个任务都是可以执行任何类型的逻辑的脚本，而任务将其他任务指定为必须在其之前运行的依赖项。目前使用的主要大多数构建系统（例如 Ant、Maven、Gradle）都基于任务。</p><p>基于任务的构建系统往往都会面临一个问题：程序员的权力过大。因为脚本能执行的动作太丰富，构建系统本身完全不知道脚本在做什么，所以它必须在如何规划和执行构建步骤时非常保守，从而导致性能很差。此外，系统也没有办法确认每个脚本的确在做以及正确完成它声称要完成的工作，因此系统往往会变得非常复杂。这就产生了两个问题：难以并发。因为系统无法了解脚本是否并发安全，因此往往采用串行的方案。难以增量构建。</p><ul><li>基于制品（Artifact）的构建工具</li></ul><p>基于制品的构建工具采用了完全不一样的逻辑，在这样的系统中，程序员的权力被大幅缩减，「任务」转为由构建系统制定，程序员可以对任务做有限的配置，但不能决定任务何时执行、如何执行。程序员只能指定「依赖项」和「构建目标」，由构建系统决定如何执行构建。</p><p>具体到 Bazel 来说，Bazel 提供了一系列「rule」，这些 rule 既可以是官方团队维护的又有可以是第三方维护的。程序员在使用 Bazel 时，只需要指定所使用的 rule，构建目标以及依赖项；Bazel 将自动解析依赖关系，并尽可能以最高效率来完成构建。</p><h3 id="Why-Bazel？"><a href="#Why-Bazel？" class="headerlink" title="Why Bazel？"></a>Why Bazel？</h3><ul><li>fast &amp; correct</li><li>高扩展性，多语言支持</li><li>对大仓友好</li><li>限制程序员的权力</li></ul><h2 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>当用户告诉 Bazel 要构建某个 Target 的时候，Bazel 会分析这个文件如何构建（构建动作定义为 Action，和其他构建系统的 Task 大同小异），如果 Target 依赖了其他 Target，Bazel 会进一步分析依赖的 Target 又是如何构建生成的，这样一层层分析下去，最终绘制出完整的执行计划。</p><p>这里的 Action 是 Bazel 的核心概念，也是 Bazel 区分于其他构建工具的重要因素：Action 由 Rule 决定，本质上是 Rule 的实例化；而 Rule 不由构建者决定，构建者只能声明使用了某个 Rule。更具体的来说，Rule 是剥离于项目外的，由 Bazel 官方开发，同时对外暴露相关定义，从而允许第三方开发者开发自定义 Rule。</p><img src="/2024/04/22/bazel-1/task.png" class="" title="Bazel 原理"><p>举个🌰，下面是两个 BUILD.Bazel 文件( Bazel 描述文件)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs starlark">// main/BUILD.bazel<br>cc_binary(<br>    name = &quot;hello-world&quot;,<br>    srcs = [&quot;hello-world.cc&quot;],<br>    deps = [<br>        &quot;:hello-greet&quot;,<br>        &quot;//lib:hello-time&quot;<br>    ]<br>)<br><br>cc_library(<br>    name = &quot;hello-greet&quot;,<br>    srcs = [&quot;hello-greet.cc&quot;],<br>    hdrs = [&quot;hello-greet.h&quot;]<br>)<br><br>// lib/BUILD.bazel<br>cc_library(<br>    name = &quot;hello-time&quot;,<br>    srcs = [&quot;hello-time.cc&quot;],<br>    hdrs = [&quot;hello-time.h&quot;],<br>    deps = [<br>        &quot;:sum&quot;<br>        &quot;//proto:example_data&quot;<br>    ],<br>    visibility = [&quot;//main:__pkg__&quot;]<br>)<br><br>cc_library(<br>    name = &quot;sum&quot;,<br>    srcs = [&quot;sum.cpp&quot;],<br>    hdrs = [&quot;sum.h&quot;],<br>)<br></code></pre></td></tr></table></figure><p>最终，Bazel 会生成类似于如下的编译产物：</p><img src="/2024/04/22/bazel-1/process.png" class="" title="编译过程"><h3 id="并行编译"><a href="#并行编译" class="headerlink" title="并行编译"></a>并行编译</h3><p>Bazel 精准的知道每个 Action 依赖哪些文件，这使得没有相互依赖关系的 Action 可以并行执行，而不用担心竞争问题。因此我们可以充分利用多核 CPU 的特性，尽可能提高并发，优化构建效率。</p><h3 id="增量构建"><a href="#增量构建" class="headerlink" title="增量构建"></a>增量构建</h3><p>Bazel 会检测本地文件系统是否保留着上一次构建的 outputs，如果有，此时 Bazel 只需要分析 inputs, commands 和 envs 和上次相比有没有改变，没有改变就直接跳过该 Action 的执行。尽管这个功能很多现代构建工具都支持，但 Bazel 仍有独特的优势：更快，更准。</p><p>这是因为：Bazel 采用了 Client&#x2F;Server 架构，当用户键入 Bazel build 命令时，调用的是 Bazel 的 client 工具，而 client 会拉起 server，并通过 grpc 协议将请求 (buildRequest) 发送给它。由 server 负责配置的加载，ActionGraph 的生成和执行。构建结束后，Server 并不会立即销毁，而 ActionGraph 也会一直保存在内存中。当用户第二次发起构建时，Bazel 会检测工作空间的哪些文件发生了改变，并更新 ActionGraph。如果没有文件改变，就会直接复用上一次的 ActionGraph 进行分析。</p><h3 id="封闭性"><a href="#封闭性" class="headerlink" title="封闭性"></a>封闭性</h3><p>Bazel 将构建分为多个 action，单个 action 被要求是「封闭」的，这意味着：在任何时间、任何场景，相同的 action 总应该获得相同的结果。封闭性是 Bazel 远程缓存与远程执行的基础。通常来说，Bazel 的 rule 会尽最大可能满足封闭性。</p><h2 id="远程执行"><a href="#远程执行" class="headerlink" title="远程执行"></a>远程执行</h2><p>在上述的架构中，我们发现，既然 Bazel Action 的执行是封闭的，那么它在哪里执行，有谁执行，便不再重要，因此，一个直观的想法便出现了：为什么不能在远程执行构建，本地只需要下载产物即可呢？远程缓存和远程构建便是 bazel 在这方面的实践。</p><h3 id="远程缓存"><a href="#远程缓存" class="headerlink" title="远程缓存"></a>远程缓存</h3><p>因为 Action 满足封闭性，即相同的 Action 信息一定产生相同的结果，因此可以建立 Action 到 ActionResult 的映射。为了便于索引，Bazel 把 Action 信息通过 sha256 哈希算法压缩成摘要 (Digest)，把 Digest 到 ActionResult 的映射存储在云端，就可以实现 Action 的远程缓存。其他用户&#x2F;机器在执行某个 Action 的时候，可以先查询此 Action 是否存在。如果存在，直接复用即可。</p><p>远程缓存的更多信息可以参见：<a href="https://km.sankuai.com/collabpage/2006036512">https://km.sankuai.com/collabpage/2006036512</a></p><h3 id="远程构建"><a href="#远程构建" class="headerlink" title="远程构建"></a>远程构建</h3><p>更进一步的，既然 ActionResult 可以被不同的 Bazel 任务共享，说明 ActionResult 和 Action 在哪里执行并没有关系。因此，Bazel 在构建时，可以把 Action 发送给另一台服务器执行，对方执行完，向 CAS 上传 ActionResult，然后本地再下载。</p><p>远程构建的更多信息可以参见：<a href="https://km.sankuai.com/collabpage/2113624250">https://km.sankuai.com/collabpage/2113624250</a></p><h2 id="挑战-No-Silver-Bullet"><a href="#挑战-No-Silver-Bullet" class="headerlink" title="挑战- No Silver Bullet"></a>挑战- No Silver Bullet</h2><ul><li>封闭性</li></ul><p>毫无疑问，「封闭」是远程执行的生命线，无论是增量构建还是远程执行，但是，想要真正做到封闭性并不容易，尤其是对于 C++ 这类语言，大部分 C++ 项目都对本地缓存存在严格的要求，如 gcc 版本，lib 库等等，这些都是封闭性的天敌。如何提供封闭性更好的 rule，以及解决不封闭带来的诸多问题，始终是 Bazel 的重要挑战。</p><ul><li>远程构建</li></ul><p>远程构建是 Bazel 的核心发展目标之一，如果没有远程构建，Bazel 只是一个优秀的构建工具，但远程构建则使得 Bazel 能够发展为支撑企业级别的大型分布式构建系统。但是，必须承认的是，远程构建仍然还在发展阶段，许多问题仍然有待解决。</p><ul><li>规模</li></ul><p>事实上，Bazel 的优势也存在一定的局限性，因为其最初设计目标是为了解决谷歌内部大仓的构建问题，因此天然倾向于大规模、多语言、多维护人员的大型仓库，为了对大仓友好付出了许多其他方面的代价，尽管对于大仓而言，这些代价相较于得到的优势可接受甚至微不足道，但对于普通仓库而言则未必如此。归根结底，这是规模的问题。</p><blockquote><p>2020年，有 issue 要求在 k8s 项目中移除 Bazel (<a href="https://github.com/kubernetes/kubernetes/issues/88553)%EF%BC%8C%E6%AD%A4">https://github.com/kubernetes/kubernetes/issues/88553)，此</a> issue 在社区引发了热烈的讨论，并且最终在 2021 年宣布通过并合入主分支。总结此 issue，核心原因是：</p><p>k8s 本身是单语言（Go）项目，早期引入 Bazel 的是为了使用构建缓存，但 Go 后续支持了构建缓存，此时 Bazel 对于 k8s 而言几乎没有优势，反而会为了维护 Bazel 和 go-build 两套构建工具付出很大的代价。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大厂祛魅</title>
    <link href="/2024/04/19/career-review/"/>
    <url>/2024/04/19/career-review/</url>
    
    <content type="html"><![CDATA[<h1 id="大厂祛魅"><a href="#大厂祛魅" class="headerlink" title="大厂祛魅"></a>大厂祛魅</h1><p>我给你写个蛋，程序员都在忙着搞程序呢，哪有人看这破博客～</p>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>go-inline-perf</title>
    <link href="/2024/03/22/go-inline-perf/"/>
    <url>/2024/03/22/go-inline-perf/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go GC 调优思路</title>
    <link href="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/"/>
    <url>/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/</url>
    
    <content type="html"><![CDATA[<h1 id="面向高性能的-Go-GC-调优思路"><a href="#面向高性能的-Go-GC-调优思路" class="headerlink" title="面向高性能的 Go GC 调优思路"></a>面向高性能的 Go GC 调优思路</h1><h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><p>最简单的优化思路是别浪费时间优化了，转 Rust，R 门！</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>FG 是一个纯内存计算服务，其特点是：核心数据使用 map 存储，请求到达服务后，查询 map，进行计算并返回。服务拉起时启动一个协程定时从 DB 获取数据刷新此 map。</p><p>计算逻辑已被优化到几乎最佳，当前最大的性能瓶颈是 GC，由于 map 中存储了大量 k-v 对，且 value 是个复杂结构体，会逃逸到堆上，导致堆上存在大量可达的存活对象， GC Pause 较长，平均在几 ms 到几百 ms，且出现过 GC Pause 超过 1s 的极端场景。这带来的后果是：单实例吞吐量降低，时延优化受阻，毛刺多。</p><p>特点：高并发，核心读接口QPS100w+，单实例（16C32G） QPS 5k+，低时延：要求核心读接口 P99&lt;1ms。</p><p>目标：优化 GC，降低 GC Pause</p><p>此方案存在很多针对 FG 服务特性的特化，但是 GC 逃逸、堆栈分析等思路是共通的。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>使用 Pprof，查看火焰图以及堆使用情况，发现问题根源是堆上的大量存活对象，导致了：</p><ul><li>GC 标记阶段，待标记对象多，并行标记的线程占用大量 CPU 资源。</li><li>GC 清理阶段，待清理对象多，STW 时间增长。</li></ul><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>将 map 分为读写两个 map，并在完成数据刷新后交换。这意味着任何时刻，内存中都存在一个只读的 map 和一个只写的 map，从而不再需要保障并发安全，因为写是单协程的。</p><p>这么做的另外一个好处是，方便牺牲写 map 的性能，来换取更好的堆分配和更好的读性能。</p><h2 id="堆栈与内联分析"><a href="#堆栈与内联分析" class="headerlink" title="堆栈与内联分析"></a>堆栈与内联分析</h2><ul><li>写场景避免堆分配<ul><li>在写场景，case by case 的分析传值是否会产生堆逃逸，尽可能的减少逃逸到堆上的对象，最直观的方式是：尽可能使用值传递，尽管会产生复制的性能损耗，但是写 map 的性能变差是可接受的；此外，在某些场景下，可以牺牲代码可读性来减少函数调用，如明确不会内联的场景，会在传递值代价很大的情况下，取消函数调用，直接合并到调用函数内。</li></ul></li><li>读场景避免值复制<ul><li>在读场景，策略则和写场景相反，读场景会尽量使用指针传递，降低值复制的代价。不过内联策略则是一致的。</li></ul></li><li>内联优化<ul><li>我们配置了 -gcflag&#x3D;’-l -l’，牺牲二进制文件的大小来换取更多的内联函数，从而减少值在栈上的传递甚至逃逸到堆上。</li></ul></li></ul><h2 id="GC-逃逸"><a href="#GC-逃逸" class="headerlink" title="GC 逃逸"></a>GC 逃逸</h2><p>前述的优化只是在尽可能减少堆上的对象，但此服务的对象多数都来自 map 中的数十万的 k-v 对，因此最大的瓶颈是如何优化 map。</p><p>很显然，这两个 map 以及其中的对象大部分都是长期不变的，之前见过另外一个 Java 服务有类似场景，他们的思路是通过 UNSAFE 修改对象头，在初始化对象的时候直接将其存活代数改为 15，从而不需要经过 ygc 直接分配到老年代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateObjAge</span><span class="hljs-params">(Object obj, <span class="hljs-type">int</span> age)</span> &#123; <br>  <span class="hljs-keyword">if</span>(!toUpdateAgeReady || obj == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span>; <br>  &#125;<br><br>  <span class="hljs-type">Long</span> <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> UNSAFE.getLong(obj, <span class="hljs-number">0L</span>);<br>  <span class="hljs-type">long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mark &amp; AGE_64_MASK | ((<span class="hljs-type">long</span>)(age &amp; <span class="hljs-number">0xF</span>)) &lt;&lt; <span class="hljs-number">3</span>;<br><br>  UNSAFE.putLong(obj, <span class="hljs-number">0L</span>, result); <br>&#125;<br></code></pre></td></tr></table></figure><p>然而 Go 没有分代 GC，但一个类似的思路是：能否让这些对象对 Runtime 不可见，从而避开 GC？虽然可能会内存泄露，但是只要手动管理好这些内存，收益会是很可观的。</p><p>基于此，我们的想法便很清晰了：如何在 Go 中做到 GC 逃逸？Arena 似乎可行，但它现在还是实验特性，并且 Proposal 被无限期搁置了。但 Arena 的思想我们可以偷一下，于是便有了这个思路。</p><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><p>在服务拉起时，绕开语言 API，使用内核 API sys_mmap 直接向 OS 申请内存，自行管理此内存。</p><p>优势：这一片内存是根对象不可达的，Go Runtime 检测不到这一片内存，标记和清理压力会大幅降低。</p><p>劣势：需要手动管理内存。</p><h3 id="gcescape"><a href="#gcescape" class="headerlink" title="gcescape"></a>gcescape</h3><p><a href="https://github.com/hyphennn/gcescape">https://github.com/hyphennn/gcescape</a></p><p>广告时间：强烈推荐，一个超快的 go collection 库，可以帮助你超大幅度的降低 gc 时间，超过 99%！</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>弃用标准库 map，自行实现 GCEscapeMap，使用 GCEscapeMap 作为核心数据的存储。</p><p>核心数据结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> GCEscapeMap[T any] <span class="hljs-keyword">struct</span> &#123;<br>s       []T<br>realCap <span class="hljs-type">int</span><br>realLen <span class="hljs-type">int</span><br>idxMap  <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>核心方法：向内核申请内存</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeSlice</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(<span class="hljs-built_in">len</span> <span class="hljs-type">int</span>)</span></span> reflect.SliceHeader &#123;<br>fd := <span class="hljs-number">-1</span><br><span class="hljs-keyword">var</span> t T<br>data, _, errno := syscall.Syscall6(<br>syscall.SYS_MMAP,<br><span class="hljs-number">0</span>, <span class="hljs-comment">// address</span><br><span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>)*unsafe.Sizeof(t),<br>syscall.PROT_READ|syscall.PROT_WRITE,<br>syscall.MAP_ANON|syscall.MAP_PRIVATE,<br><span class="hljs-type">uintptr</span>(fd), <span class="hljs-comment">// No file descriptor</span><br><span class="hljs-number">0</span>,           <span class="hljs-comment">// offset</span><br>)<br><span class="hljs-keyword">if</span> errno != <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">panic</span>(errno)<br>&#125;<br><br><span class="hljs-keyword">return</span> reflect.SliceHeader&#123;<br>Data: data,<br>Len:  <span class="hljs-built_in">len</span>,<br>Cap:  <span class="hljs-built_in">len</span>,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基于申请的内存初始化 GCEscapeMap</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// 初始化 GCEscapeMap</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewGCEscapeMap</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(<span class="hljs-built_in">cap</span> <span class="hljs-type">int</span>)</span></span> *GCEscapeMap[T] &#123;<br><span class="hljs-keyword">var</span> t T<br><span class="hljs-keyword">if</span> reflect.TypeOf(t).Kind() == reflect.Pointer &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;no ptr allowed&quot;</span>)<br>&#125;<br>data := makeSlice[T](<span class="hljs-built_in">cap</span>)<br>s := *(*[]T)(unsafe.Pointer(&amp;data))<br><span class="hljs-keyword">return</span> &amp;GCEscapeMap[T]&#123;s: s, realCap: <span class="hljs-built_in">cap</span>, realLen: <span class="hljs-number">0</span>, idxMap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>, <span class="hljs-built_in">cap</span>)&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读&amp;写 map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *GCEscapeMap[T])</span></span> Push(k <span class="hljs-type">int</span>, v T) &#123;<br>idx, ok := e.idxMap[k]<br><span class="hljs-keyword">if</span> ok &#123;<br>e.s[idx] = v<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>e.s[e.realLen] = v<br>e.realLen++<br>e.CheckAndScale()<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *GCEscapeMap[T])</span></span> Get(k <span class="hljs-type">int</span>) (*T, <span class="hljs-type">bool</span>) &#123;<br>idx, ok := e.idxMap[k]<br><span class="hljs-keyword">if</span> ok &#123;<br><span class="hljs-keyword">return</span> &amp;e.s[idx], <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>e.CheckAndScale(): 此方法用于检测 realLen 和 realCap 的比值，在超过「安全阈值」时会开始告警，在超过「扩容阈值」时会开始主动扩容并告警，其原理和 Slice 一致，如果主动扩容失败，将中止读写 map 交换并告警。其中会存在大量业务和告警代码，因此不写了。 </p><p>需要指出的是，主动扩容是非常危险、代价非常高的操作，因此我们需要尽可能避免其出现：关注实例内存用量；关注 GCEscapeMap 当前用量。</p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>GCEscapeMap 包含以下成员：</p><ul><li>s 是数据真实存储的位置，由于其是直接向 OS 申请的，因此不会被 Runtime 扫描到。</li><li>realCap 和 realLen 用于控制 s 来实现类似 slice 的功能，因为 s 实际是定长的。</li><li>idxMap 是用于实现 map 能力的，其 k,v 都是 int，因此会被 Runtime 忽略（Go 1.5 开始提供此特性：<a href="https://go-review.googlesource.com/c/go/+/3288%EF%BC%89">https://go-review.googlesource.com/c/go/+/3288）</a></li></ul><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>我们使用 benchmark 来检验性能，并使用 Pprof 来观察堆情况</p><p>benchmark：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkEmap</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>m := emap.NewGCEscapeMap(<span class="hljs-number">2000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m.Push(i, TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;)<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>m.Get(i)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkNormalMap</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]emap.Aim, <span class="hljs-number">1000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m[i] = TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>_ = m[i]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/img.png" class="" title="Benchmark 结果"><p>Pprof</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>_ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>http.ListenAndServe(<span class="hljs-string">&quot;0.0.0.0:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;()<br>time.Sleep(time.Second)<br>UseGCEscapeMap()<br><span class="hljs-comment">//UseNormalMap()</span><br>time.Sleep(<span class="hljs-number">1000</span> * time.Second)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UseGCEscapeMap</span><span class="hljs-params">()</span></span> &#123;<br>m := emap.NewGCEscapeMap[TestAim](<span class="hljs-number">2000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m.Push(i, TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>st := time.Now()<br>runtime.GC()<br>fmt.Printf(<span class="hljs-string">&quot;GC took %s\n&quot;</span>, time.Since(st))<br>time.Sleep(time.Second)<br>&#125;<br><br>runtime.KeepAlive(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UseNormalMap</span><span class="hljs-params">()</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]TestAim, <span class="hljs-number">1000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m[i] = TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>st := time.Now()<br>runtime.GC()<br>fmt.Printf(<span class="hljs-string">&quot;GC took %s\n&quot;</span>, time.Since(st))<br>time.Sleep(time.Second)<br>&#125;<br><br>runtime.KeepAlive(m)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>UseGCEscapeMap：</p><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/stdout-em.png" class="" title="UseGCEscapeMap输出结果"><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/heap-status-em.png" class="" title="UseGCEscapeMap堆状态"><p>UseNormalMap:</p><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/stdout-nm.png" class="" title="UseNormalMap输出结果"><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/heap-status-nm.png" class="" title="UseNormalMap堆状态">]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>End&amp;Start</title>
    <link href="/2024/02/23/End-Start/"/>
    <url>/2024/02/23/End-Start/</url>
    
    <content type="html"><![CDATA[<h1 id="End-Start"><a href="#End-Start" class="headerlink" title="End&amp;Start"></a>End&amp;Start</h1><p>立个 flag：这个周末写点东西～</p>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hello-world</title>
    <link href="/2024/01/25/hello-world/"/>
    <url>/2024/01/25/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Hyphen"><a href="#Hyphen" class="headerlink" title="Hyphen"></a>Hyphen</h1><p>This is a Hello World page</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello Wolrd!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Only For Hyphen</title>
    <link href="/2018/06/08/i-am-not-hyphen/"/>
    <url>/2018/06/08/i-am-not-hyphen/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6ce60adba2742e5bb1acd9d30cafd6094a5e2746d02304b10db265966dcdadd8">e1aecaa9679ea589ee3f9bead93b3b3f9ef65ab744575e3d95bfcb0b6f9489dbfaabc2dd7e6991127a0b6094f0eb2d7aed554915ebea21dee1962387031a296dc57fa670b85e8750016005d408c34a122ccbdad73dafd21406c7fa8ac830a95b8f31ba6e12a36bd1c40f718c7c88ff9497feebd93c721e0e2e6e7a0e3da17f6277c798238c5d7f795aa8d21106cf8c10544a32ff4115a11b33c6c566a069d7fe5d0ed1a2594fe11091eb16e4daf360814e6f2e175ede437265160120f541b33e84e205625c0ff63240cfaa9c96156fb402d048fd78f043e84b737afb6f8b59f0b988fb77d71ef488b8f023cfc63788d37172a3ea16886b4b79a7c4d199ebc42b5e18fd0f401bdfb830cdd1f488c0a972c2251afd2baf891ec1152b14e9b77c3e485382ffade4fc11709466ac2dfec5a0a57da30844642bde7ff7be5a4d75629fc372f60030952cf5a9e4b6378f82dee7127825ad59817cb73daebbf3265d00dba0d2812ea88504a278f9e7b7b7510bb05a90844941da8e2d0e93e2d418b43bd009a6e9c3e69a7da2dac1c73179fbc8b6411dc993109a466e5bafe8a70f78011900ac16e8492d1d144e4c1316f21d19dc1265c1e2b56f29820a2a47aa167fc37cf34931f00d5db10f51091153b79eae03b8b4dfdb5de6c1fd18ea7912be212631d577efd18bde93b5d788936b0d628243a060ea746da344c39b9da95d611a11dc847a288b8352c915f0aa56a2d452af32b38457051b93a5af0043f4ef084c3303dc231820cd2fc8e591e37c6ff5ff8e6a555abf78648d6e02da05d00f197ba119060dc5f24db199a35c28ff2507e57c7a4324c121aff68deae53e048d7757b9b47be79a4a7db26f4d1780571200d35af87b9044bb52ad4a1c17244b0ca84548e780e2be15a518986ba32a8de70d016f1c80f538d305fb71a4acc14261e34f9d890796518581df3f570c90bdc40290bbe8dd0d9535cc51decb05c65b87ed6ab0ae0581b9ffbc5474ac7f1c53cefbf01a02bc168ec696f81b4e9c11146a115ef45f97749d5ba30a4bc05bbab03f9f1dd599100b8d3f2b6921cd077353ea47535d76eefd82099b4490d06c704d5d4d0a64e920d97630411f7583e0d3da9cde8c63a5d0db792792811a6866792f272697f042c3c44d4645fb2aef848a2c0bf28dd245d4c95187f961cb2b6d341fbf02059a5b1becf3fe832f6967cb0cca2f4b00864aa061d7f75e230243cac402186d5479efc7c913a2e784cd40f3d3bdc15c9c3652ac5d501bf3acbead6762b2929ab53cffabd9fc31b40b0e8f96a5df52ed48746e66527ce304185525f37b661467a04e4f4e824e74f823a3ae13b4cd648840d14a8a7f4f0afbd41ab145415ed8d0798b48dc1805148519d2f32e4fc1fff24fc0fc4421300956500d552dee0a06382f6b08f21e1d76fbc6d0e06ac4ed9d11dd60d5f6b62d3423b8e22b8f3f233ce56d466d5432ef084e1ace5975d90e13952f99ae028da221aec5b4b8c4ec2507a634ce216acd0ef1dc78da5787642532479e018a10a0d348970e46b26567ff00f687590032441acb85e5a8ad368dc664c98d3dcda586605521024fffe8035ff17b28f649b7daf5fe75d26beba44e11ecc5d3ba4eec27e9344dc5839142f04b371d38fc7de6ab566b5d29a054d4ef37cb92af237f30ccc6b0199024029951d1c2c29ae331ad71bf7c12501f676d91dbd3afa5f46c000acc62805fb80a1a0e29af876b1a92887582cf930ba81a671f815e85b0136df34dd54bd6d3af229a5acfbeb118b705d54dc263c5a7a8814ddd281f77c7238389029487f55990694b990d3562506ccdd9242d394dc55261c901b3e2e05bf68252dd1cc46b2735c89bc774186509b4e1e0d0fb90e281b8a64980d3cdf9f0d24488283487e83beb7b24d214e57956f019a9c2ba2c5e1454110f72d94958fc71d2be8ea63f40a2b54594ee0004683e1da30531f2733e227c069efc34add0bd66827bd39105a0d37312b6d448d9e4160ae1a2dc61eb4c447ab01488a42f26a9b3b5fb1abe3062d9670009ea59a3f45febeb150abe155d5a8863fa0413632acd19800463df52c327c17c8151bfe8f2de30c985cdba6f848ec020a2d32f154292170fa38a4b3b554bf36b1af5b01a16f682f0ae6dfe7155d6913391c70f0fad9e8ba4b4e75df011e99597fb7ec40d3a7a964059b21170c1d6be2d434316446c475a7dd85d42a4647665e0adcc552b4905f31ae9e4f330631deb42ea0f571f2174006173c529631f535fbdfa492410d360f37eb2cef18f98619ca88a09631f2e74bd6466c751b8453ee6df3b45ea134c6ca0cb774c18021da7c561eaa7ec8087d02d3df0ef256de503188145b1cb7344afe12792832162369713767b2eabf900d8132b03dc1356137d90422aa4ebef3d76744b2573c6e1b62008f8dfb26d499987fc20a8c1f0d46505cb86320488fb729a11065751cb473d59ed2d12536e108c2922b84c2521241fcca1e5580873a12562bc768f2fb11fa06d6ab677f8c95788875e1eb9d1ba7339c0c11b262afcb4cf5fb47087036892a04c9c848bc2f24bbc14d43106f9747b9eccee8d4b1df53e5e3b4ffbc6c5d04f7327d65965e81ef3df162974925622f1dbb1984a21680c4da09daf3d86a8cf79972442137df8e8cded0ce7d8d0309345508df8438281b2cc8951be6bffdaa71339ea7c02065d42d444be5f4511349cd368d93a4028ce2fb9ffb429d1f3efc2fc636a9f3b0e7b28d2f6e8f3c3a526672597ccc411f79f30c60bbfc3e81f67a8f65926beedd6b4b8f78bbeb1b922bc6f6305818fe63e4d84af83028d3c93414b7f99e01b5dfd3252ac1213e783804d7a86bc20eb8fe30a62d26b7eb69963e7b03e0875256612799d0d2dcb0b058542766216f1d17d7c78556a1456f381cf33519e4f376bfdf77c2de67e14d1517245d5ad7ab31a43502457c5dc568536e2460e2ea881fbbb784ac418355ced57b1b42db0fc0a9d45a5a4e4fac89f51363fa994e50c2ba5afda2c9ebc2cd499f3a06cb1f78aeddde46e1f3f9d920e558e5055315bf994e2513f21084c86e570a3f489f4f0ec3e4db73587f69bb7260a11cae10dae78904ef256d2468734aaf4755e68899efc749165c47623b7bfc02a801f28f22c577363e3018acbc66216eaed68f7f0b285d36360d0874c4fc837caa0db8f4ea3a69413d2e1e284c6b75949db653269c131f01e9195b6e6ccb525868e85221b379da749232098dcf036e040307358137c208fded98a26e00747ce6a05257d8e813360cc5335f896dd3e8df37796f3eca024e62336992a73fa43dcaae054d2ffc55a0d75401bce06bdcf8db16a064194fd7f53da9ca8294524f3d5ef8a654c93c4506ec027513792eaaa2f8a2312d496a84de0916e92278472d66a8e265a11f21a23147ed6c37692a48805e57e9326c0f3d04b50a8b7019434d93e98e0df60804f1834077d7e93a3a32a8b419535be806f3c0a23e2e4db716fa435a099b30bf1c207ad20fe8156989d7bf162159a9857b3e9b5e59df15ffb64b07377e95fcf580db7dfa103917c475189c251cd605727324abb0fb3dc6282e28778c222fcde418d9aef8047c314fe063aa58e5d6872e9ba1ef1ccb0a860a7d8be5dcc06a02c84fed268016c666f25662030db0fcd5e231d786c3ab6c985f7ba482b369190f175398e6169dd66d8257b1c408c5143cbc2bbbfabc53cb9c2b030aa7b736ffd300e869c983a76b185f35ba209cc0b202bd7e325e98f9a016caed5569a5891672d75c5c3f67056dea245adf4ad00c6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="wobuguan">wobuguan</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>self</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>only-for-me</title>
    <link href="/2017/06/08/only-for-me/"/>
    <url>/2017/06/08/only-for-me/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一些碎碎念</title>
    <link href="/1999/10/01/fragment/"/>
    <url>/1999/10/01/fragment/</url>
    
    <content type="html"><![CDATA[<style>    .cd-timeline.svelte-1t2uafz .svelte-1t2uafz,.cd-timeline.svelte-1t2uafz .svelte-1t2uafz::after,.cd-timeline.svelte-1t2uafz .svelte-1t2uafz::before{-webkit-box-sizing:border-box;box-sizing:border-box}.cd-timeline.svelte-1t2uafz{font-size:1.6rem;font-family:"Droid Serif", serif;color:#7f8c97;background-color:#e9f0f5}.cd-timeline.svelte-1t2uafz a{color:#acb7c0;text-decoration:none}.cd-timeline.svelte-1t2uafz img{max-width:100%}.cd-timeline.svelte-1t2uafz h1,h2{font-family:"Open Sans", sans-serif;font-weight:bold}.cd-timeline.svelte-1t2uafz{overflow:hidden;margin:2em auto}.cd-timeline__container.svelte-1t2uafz{position:relative;width:90%;max-width:1170px;margin:0 auto;padding:2em 0}.cd-timeline__container.svelte-1t2uafz::before{content:'';position:absolute;top:0;left:18px;height:100%;width:4px;background:#d7e4ed}@media only screen and (min-width: 1170px){.cd-timeline.svelte-1t2uafz{margin-top:3em;margin-bottom:3em}.cd-timeline__container.svelte-1t2uafz::before{left:50%;margin-left:-2px}}.cd-timeline__block.svelte-1t2uafz{position:relative;margin:2em 0}.cd-timeline__block.svelte-1t2uafz:after{content:"";display:table;clear:both}.cd-timeline__block.svelte-1t2uafz:first-child{margin-top:0}.cd-timeline__block.svelte-1t2uafz:last-child{margin-bottom:0}@media only screen and (min-width: 1170px){.cd-timeline__block.svelte-1t2uafz{margin:4em 0}}.cd-timeline__img.svelte-1t2uafz{position:absolute;top:0;left:0;width:40px;height:40px;border-radius:50%;-webkit-box-shadow:0 0 0 4px white, inset 0 2px 0 rgba(0, 0, 0, 0.08), 0 3px 0 4px rgba(0, 0, 0, 0.05);box-shadow:0 0 0 4px white, inset 0 2px 0 rgba(0, 0, 0, 0.08), 0 3px 0 4px rgba(0, 0, 0, 0.05)}.cd-timeline__img.svelte-1t2uafz{background:#75ce66}@media only screen and (min-width: 1170px){.cd-timeline__img.svelte-1t2uafz{width:60px;height:60px;left:50%;margin-left:-30px;-webkit-transform:translateZ(0);transform:translateZ(0)}}@-webkit-keyframes svelte-1t2uafz-cd-bounce-1{0%{opacity:0;-webkit-transform:scale(0.5);transform:scale(0.5)}60%{opacity:1;-webkit-transform:scale(1.2);transform:scale(1.2)}100%{-webkit-transform:scale(1);transform:scale(1)}}@keyframes svelte-1t2uafz-cd-bounce-1{0%{opacity:0;-webkit-transform:scale(0.5);transform:scale(0.5)}60%{opacity:1;-webkit-transform:scale(1.2);transform:scale(1.2)}100%{-webkit-transform:scale(1);transform:scale(1)}}.cd-timeline__content.svelte-1t2uafz{position:relative;margin-left:60px;background:white;border-radius:0.25em;padding:1em;-webkit-box-shadow:0 3px 0 #d7e4ed;box-shadow:0 3px 0 #d7e4ed}.cd-timeline__content.svelte-1t2uafz:after{content:"";display:table;clear:both}.cd-timeline__content.svelte-1t2uafz::before{content:'';position:absolute;top:16px;right:100%;height:0;width:0;border:7px solid transparent;border-right:7px solid white}.cd-timeline__content.svelte-1t2uafz h2.svelte-1t2uafz{color:#303e49}.cd-timeline__content.svelte-1t2uafz p,.cd-timeline__date.svelte-1t2uafz{font-size:1.3rem}.cd-timeline__content.svelte-1t2uafz p{margin:1em 0;line-height:1.6}.cd-timeline__date.svelte-1t2uafz{display:inline-block}.cd-timeline__date.svelte-1t2uafz{float:left;padding:.8em 0;opacity:.7}@media only screen and (min-width: 768px){.cd-timeline__content.svelte-1t2uafz h2.svelte-1t2uafz{font-size:2rem}.cd-timeline__content.svelte-1t2uafz p{font-size:1.6rem}.cd-timeline__date.svelte-1t2uafz{font-size:1.4rem}}@media only screen and (min-width: 1170px){.cd-timeline__content.svelte-1t2uafz{margin-left:0;padding:1.6em;width:45%;-webkit-transform:translateZ(0);transform:translateZ(0)}.cd-timeline__content.svelte-1t2uafz::before{top:24px;left:100%;border-color:transparent;border-left-color:white}.cd-timeline__date.svelte-1t2uafz{position:absolute;width:100%;left:122%;top:6px;font-size:1.6rem}.cd-timeline__block.svelte-1t2uafz:nth-child(even) .cd-timeline__content.svelte-1t2uafz{float:right}.cd-timeline__block.svelte-1t2uafz:nth-child(even) .cd-timeline__content.svelte-1t2uafz::before{top:24px;left:auto;right:100%;border-color:transparent;border-right-color:white}.cd-timeline__block.svelte-1t2uafz:nth-child(even) .cd-timeline__date.svelte-1t2uafz{left:auto;right:122%;text-align:right}}@-webkit-keyframes svelte-1t2uafz-cd-bounce-2{0%{opacity:0;-webkit-transform:translateX(-100px);transform:translateX(-100px)}60%{opacity:1;-webkit-transform:translateX(20px);transform:translateX(20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes svelte-1t2uafz-cd-bounce-2{0%{opacity:0;-webkit-transform:translateX(-100px);transform:translateX(-100px)}60%{opacity:1;-webkit-transform:translateX(20px);transform:translateX(20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@-webkit-keyframes svelte-1t2uafz-cd-bounce-2-inverse{0%{opacity:0;-webkit-transform:translateX(100px);transform:translateX(100px)}60%{opacity:1;-webkit-transform:translateX(-20px);transform:translateX(-20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}@keyframes svelte-1t2uafz-cd-bounce-2-inverse{0%{opacity:0;-webkit-transform:translateX(100px);transform:translateX(100px)}60%{opacity:1;-webkit-transform:translateX(-20px);transform:translateX(-20px)}100%{-webkit-transform:translateX(0);transform:translateX(0)}}    </style><section class="cd-timeline js-cd-timeline svelte-1t2uafz">    <div class="cd-timeline__container svelte-1t2uafz">        <div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>钢铁的领袖已经逝去，领袖的钢铁必将永存</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-12-26</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>上班无聊->刷每日一题->打开leetcode->发现hard->再见👋</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-12-16</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>今年的储蓄计划彻底破产，分币不剩，严重超支，烦死了</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-12-10</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>装修真的好麻烦啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊。身边的每个朋友都在说，我装出来的房子没有家的感觉，太冷了。可是我也不知道到底什么是家的感觉，毕竟从 9 岁开始，就一直住在宿舍了。😊</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-12-10</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>我写不出算法题，也写不出方案。。。我也不知道该咋办了</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-08-28</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>做了个很奇怪的梦，梦到了很多年前的一个人。可惜，已经连在梦里都不记得那个人的样子了。</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-07-05</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>什么时候才能写明白动态规划题。。。btw. 假如我的力扣刷题日历像我的瑞幸咖啡日历就好了。。。</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-06-28</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>打算升级下整个站点的主题和功能，找了很久，那些贼拉炫酷的站点我这种业余前端是真的搭不起来，还是直接用 butterfly 吧</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-06-24</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>好想 618 给自己买点东西啊，不然好久没消费了，感觉钱都白赚了。。。但是一看自己卡里 5000 块钱都没了。。。生活太艰难了</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-05-31</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>仍然记得那是中学时一个平凡的初秋黄昏，我在田径场的草坪上漫不经心地坐着看小说，停在山尖的落日洒出柔和的光芒，别说心事，心头竟连一件闲事都没有。我总以为那是一个平凡的日子。然而往后多年一路奔跑再无半刻停歇，那样的日子再也不会有了。我们无法估量「片刻」的价值，除非它成为回忆。</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-05-21</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>oncall 值班真的会让人犯厌蠢症，作为工程师没有任何解决问题的能力，文档不会看，google/内网不会查，最基本的错误提示看不明白，出现任何问题只会 找人问然后要求别人解决，要不就是无脑甩锅跟个低能一样，某些人 35 被裁都裁晚了。</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-05-08</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>不想参加饭局。以前觉得有朋友一起约饭是很快乐的事情，但随着年岁的增长，「朋友」愈发通货膨胀，似乎什么样的人都能称之为「朋友」， 几乎每周都有饭局，真的不想去，只想周末好好休息休息，然而又不好意思拒绝。真的很烦。</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-04-30</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>u1s1，这个页面真的好丑。。。但是作为一名业余得不能再业余的前端，有个这样的页面就不错了，找不好更好的 hexo 能用的解决方案</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-04-10</span>            </div>        </div><div class="cd-timeline__block js-cd-block svelte-1t2uafz">            <div class="cd-timeline__img cd-timeline__img--movie js-cd-img svelte-1t2uafz">            </div>            <div class="cd-timeline__content js-cd-content svelte-1t2uafz">                <h2 class="svelte-1t2uafz"></h2>                <font size=4>想开个新的页面，记录一些乱七八糟的碎碎念，用时间线串联一下</font>                <span class="cd-timeline__date svelte-1t2uafz">2024-04-01</span>            </div>        </div>    </div></section>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
