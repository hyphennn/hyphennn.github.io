<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go GC 调优思路</title>
    <link href="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/"/>
    <url>/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/</url>
    
    <content type="html"><![CDATA[<h1 id="面向高性能的-Go-GC-调优思路"><a href="#面向高性能的-Go-GC-调优思路" class="headerlink" title="面向高性能的 Go GC 调优思路"></a>面向高性能的 Go GC 调优思路</h1><h2 id="0"><a href="#0" class="headerlink" title="0"></a>0</h2><p>最简单的优化思路是别浪费时间优化了，转 Rust，R 门！</p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>FG 是一个纯内存计算服务，其特点是：核心数据使用 map 存储，请求到达服务后，查询 map，进行计算并返回。服务拉起时启动一个协程定时从 DB 获取数据刷新此 map。</p><p>计算逻辑已被优化到几乎最佳，当前最大的性能瓶颈是 GC，由于 map 中存储了大量 k-v 对，且 value 是个复杂结构体，会逃逸到堆上，导致堆上存在大量可达的存活对象， GC Pause 较长，平均在几 ms 到几百 ms，且出现过 GC Pause 超过 1s 的极端场景。这带来的后果是：单实例吞吐量降低，时延优化受阻，毛刺多。</p><p>特点：高并发，核心读接口QPS100w+，单实例（16C32G） QPS 5k+，低时延：要求核心读接口 P99&lt;1ms。</p><p>目标：优化 GC，降低 GC Pause</p><p>此方案存在很多针对 FG 服务特性的特化，但是 GC 逃逸、堆栈分析等思路是共通的。</p><h2 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h2><p>使用 Pprof，查看火焰图以及堆使用情况，发现问题根源是堆上的大量存活对象，导致了：</p><ul><li>GC 标记阶段，待标记对象多，并行标记的线程占用大量 CPU 资源。</li><li>GC 清理阶段，待清理对象多，STW 时间增长。</li></ul><h2 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h2><p>将 map 分为读写两个 map，并在完成数据刷新后交换。这意味着任何时刻，内存中都存在一个只读的 map 和一个只写的 map，从而不再需要保障并发安全，因为写是单协程的。</p><p>这么做的另外一个好处是，方便牺牲写 map 的性能，来换取更好的堆分配和更好的读性能。</p><h2 id="堆栈与内联分析"><a href="#堆栈与内联分析" class="headerlink" title="堆栈与内联分析"></a>堆栈与内联分析</h2><ul><li>写场景避免堆分配<ul><li>在写场景，case by case 的分析传值是否会产生堆逃逸，尽可能的减少逃逸到堆上的对象，最直观的方式是：尽可能使用值传递，尽管会产生复制的性能损耗，但是写 map 的性能变差是可接受的；此外，在某些场景下，可以牺牲代码可读性来减少函数调用，如明确不会内联的场景，会在传递值代价很大的情况下，取消函数调用，直接合并到调用函数内。</li></ul></li><li>读场景避免值复制<ul><li>在读场景，策略则和写场景相反，读场景会尽量使用指针传递，降低值复制的代价。不过内联策略则是一致的。</li></ul></li><li>内联优化<ul><li>我们配置了 -gcflag&#x3D;’-l -l’，牺牲二进制文件的大小来换取更多的内联函数，从而减少值在栈上的传递甚至逃逸到堆上。</li></ul></li></ul><h2 id="GC-逃逸"><a href="#GC-逃逸" class="headerlink" title="GC 逃逸"></a>GC 逃逸</h2><p>前述的优化只是在尽可能减少堆上的对象，但此服务的对象多数都来自 map 中的数十万的 k-v 对，因此最大的瓶颈是如何优化 map。</p><p>很显然，这两个 map 以及其中的对象大部分都是长期不变的，之前见过另外一个 Java 服务有类似场景，他们的思路是通过 UNSAFE 修改对象头，在初始化对象的时候直接将其存活代数改为 15，从而不需要经过 ygc 直接分配到老年代。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateObjAge</span><span class="hljs-params">(Object obj, <span class="hljs-type">int</span> age)</span> &#123; <br>  <span class="hljs-keyword">if</span>(!toUpdateAgeReady || obj == <span class="hljs-literal">null</span>) &#123;<br>    <span class="hljs-keyword">return</span>; <br>  &#125;<br><br>  <span class="hljs-type">Long</span> <span class="hljs-variable">mark</span> <span class="hljs-operator">=</span> UNSAFE.getLong(obj, <span class="hljs-number">0L</span>);<br>  <span class="hljs-type">long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> mark &amp; AGE_64_MASK | ((<span class="hljs-type">long</span>)(age &amp; <span class="hljs-number">0xF</span>)) &lt;&lt; <span class="hljs-number">3</span>;<br><br>  UNSAFE.putLong(obj, <span class="hljs-number">0L</span>, result); <br>&#125;<br></code></pre></td></tr></table></figure><p>然而 Go 没有分代 GC，但一个类似的思路是：能否让这些对象对 Runtime 不可见，从而避开 GC？虽然可能会内存泄露，但是只要手动管理好这些内存，收益会是很可观的。</p><p>基于此，我们的想法便很清晰了：如何在 Go 中做到 GC 逃逸？Arena 似乎可行，但它现在还是实验特性，并且 Proposal 被无限期搁置了。但 Arena 的思想我们可以偷一下，于是便有了这个思路。</p><h3 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h3><p>在服务拉起时，绕开语言 API，使用内核 API sys_mmap 直接向 OS 申请内存，自行管理此内存。</p><p>优势：这一片内存是根对象不可达的，Go Runtime 检测不到这一片内存，标记和清理压力会大幅降低。</p><p>劣势：需要手动管理内存。</p><h3 id="gcescape"><a href="#gcescape" class="headerlink" title="gcescape"></a>gcescape</h3><p><a href="https://github.com/hyphennn/gcescape">https://github.com/hyphennn/gcescape</a></p><p>广告时间：强烈推荐，一个超快的 go collection 库，可以帮助你超大幅度的降低 gc 时间，超过 99%！</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>弃用标准库 map，自行实现 GCEscapeMap，使用 GCEscapeMap 作为核心数据的存储。</p><p>核心数据结构：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> GCEscapeMap[T any] <span class="hljs-keyword">struct</span> &#123;<br>s       []T<br>realCap <span class="hljs-type">int</span><br>realLen <span class="hljs-type">int</span><br>idxMap  <span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span><br>&#125;<br></code></pre></td></tr></table></figure><p>核心方法：向内核申请内存</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">makeSlice</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(<span class="hljs-built_in">len</span> <span class="hljs-type">int</span>)</span></span> reflect.SliceHeader &#123;<br>fd := <span class="hljs-number">-1</span><br><span class="hljs-keyword">var</span> t T<br>data, _, errno := syscall.Syscall6(<br>syscall.SYS_MMAP,<br><span class="hljs-number">0</span>, <span class="hljs-comment">// address</span><br><span class="hljs-type">uintptr</span>(<span class="hljs-built_in">len</span>)*unsafe.Sizeof(t),<br>syscall.PROT_READ|syscall.PROT_WRITE,<br>syscall.MAP_ANON|syscall.MAP_PRIVATE,<br><span class="hljs-type">uintptr</span>(fd), <span class="hljs-comment">// No file descriptor</span><br><span class="hljs-number">0</span>,           <span class="hljs-comment">// offset</span><br>)<br><span class="hljs-keyword">if</span> errno != <span class="hljs-number">0</span> &#123;<br><span class="hljs-built_in">panic</span>(errno)<br>&#125;<br><br><span class="hljs-keyword">return</span> reflect.SliceHeader&#123;<br>Data: data,<br>Len:  <span class="hljs-built_in">len</span>,<br>Cap:  <span class="hljs-built_in">len</span>,<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>基于申请的内存初始化 GCEscapeMap</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// 初始化 GCEscapeMap</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewGCEscapeMap</span>[<span class="hljs-title">T</span> <span class="hljs-title">any</span>]<span class="hljs-params">(<span class="hljs-built_in">cap</span> <span class="hljs-type">int</span>)</span></span> *GCEscapeMap[T] &#123;<br><span class="hljs-keyword">var</span> t T<br><span class="hljs-keyword">if</span> reflect.TypeOf(t).Kind() == reflect.Pointer &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">&quot;no ptr allowed&quot;</span>)<br>&#125;<br>data := makeSlice[T](<span class="hljs-built_in">cap</span>)<br>s := *(*[]T)(unsafe.Pointer(&amp;data))<br><span class="hljs-keyword">return</span> &amp;GCEscapeMap[T]&#123;s: s, realCap: <span class="hljs-built_in">cap</span>, realLen: <span class="hljs-number">0</span>, idxMap: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">int</span>, <span class="hljs-built_in">cap</span>)&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>读&amp;写 map</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *GCEscapeMap[T])</span></span> Push(k <span class="hljs-type">int</span>, v T) &#123;<br>idx, ok := e.idxMap[k]<br><span class="hljs-keyword">if</span> ok &#123;<br>e.s[idx] = v<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>e.s[e.realLen] = v<br>e.realLen++<br>e.CheckAndScale()<br>&#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e *GCEscapeMap[T])</span></span> Get(k <span class="hljs-type">int</span>) (*T, <span class="hljs-type">bool</span>) &#123;<br>idx, ok := e.idxMap[k]<br><span class="hljs-keyword">if</span> ok &#123;<br><span class="hljs-keyword">return</span> &amp;e.s[idx], <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>e.CheckAndScale(): 此方法用于检测 realLen 和 realCap 的比值，在超过「安全阈值」时会开始告警，在超过「扩容阈值」时会开始主动扩容并告警，其原理和 Slice 一致，如果主动扩容失败，将中止读写 map 交换并告警。其中会存在大量业务和告警代码，因此不写了。 </p><p>需要指出的是，主动扩容是非常危险、代价非常高的操作，因此我们需要尽可能避免其出现：关注实例内存用量；关注 GCEscapeMap 当前用量。</p><h3 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h3><p>GCEscapeMap 包含以下成员：</p><ul><li>s 是数据真实存储的位置，由于其是直接向 OS 申请的，因此不会被 Runtime 扫描到。</li><li>realCap 和 realLen 用于控制 s 来实现类似 slice 的功能，因为 s 实际是定长的。</li><li>idxMap 是用于实现 map 能力的，其 k,v 都是 int，因此会被 Runtime 忽略（Go 1.5 开始提供此特性：<a href="https://go-review.googlesource.com/c/go/+/3288%EF%BC%89">https://go-review.googlesource.com/c/go/+/3288）</a></li></ul><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>我们使用 benchmark 来检验性能，并使用 Pprof 来观察堆情况</p><p>benchmark：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkEmap</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>m := emap.NewGCEscapeMap(<span class="hljs-number">2000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m.Push(i, TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;)<br>&#125;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>m.Get(i)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BenchmarkNormalMap</span><span class="hljs-params">(b *testing.B)</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]emap.Aim, <span class="hljs-number">1000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m[i] = TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; b.N; i++ &#123;<br>_ = m[i]<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/img.png" class="" title="Benchmark 结果"><p>Pprof</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;net/http&quot;</span><br>_ <span class="hljs-string">&quot;net/http/pprof&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>http.ListenAndServe(<span class="hljs-string">&quot;0.0.0.0:8080&quot;</span>, <span class="hljs-literal">nil</span>)<br>&#125;()<br>time.Sleep(time.Second)<br>UseGCEscapeMap()<br><span class="hljs-comment">//UseNormalMap()</span><br>time.Sleep(<span class="hljs-number">1000</span> * time.Second)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UseGCEscapeMap</span><span class="hljs-params">()</span></span> &#123;<br>m := emap.NewGCEscapeMap[TestAim](<span class="hljs-number">2000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m.Push(i, TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;)<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>st := time.Now()<br>runtime.GC()<br>fmt.Printf(<span class="hljs-string">&quot;GC took %s\n&quot;</span>, time.Since(st))<br>time.Sleep(time.Second)<br>&#125;<br><br>runtime.KeepAlive(m)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">UseNormalMap</span><span class="hljs-params">()</span></span> &#123;<br>m := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]TestAim, <span class="hljs-number">1000000</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">1000000</span>; i++ &#123;<br>m[i] = TestAim&#123;<br>Str:    <span class="hljs-string">&quot;1&quot;</span>,<br>Map:    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;1&quot;</span>&#125;,<br>Value:  <span class="hljs-number">0</span>,<br>Str2:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str3:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str4:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str5:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str6:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str7:   <span class="hljs-string">&quot;1&quot;</span>,<br>Str8:   <span class="hljs-string">&quot;1&quot;</span>,<br>Value2: <span class="hljs-number">0</span>,<br>Value3: <span class="hljs-number">0</span>,<br>Value4: <span class="hljs-number">0</span>,<br>Value5: <span class="hljs-number">0</span>,<br>Value6: <span class="hljs-number">0</span>,<br>Value7: <span class="hljs-number">0</span>,<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>st := time.Now()<br>runtime.GC()<br>fmt.Printf(<span class="hljs-string">&quot;GC took %s\n&quot;</span>, time.Since(st))<br>time.Sleep(time.Second)<br>&#125;<br><br>runtime.KeepAlive(m)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>UseGCEscapeMap：</p><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/stdout-em.png" class="" title="UseGCEscapeMap输出结果"><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/heap-status-em.png" class="" title="UseGCEscapeMap堆状态"><p>UseNormalMap:</p><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/stdout-nm.png" class="" title="UseNormalMap输出结果"><img src="/2024/03/07/Go-GC-%E8%B0%83%E4%BC%98/heap-status-nm.png" class="" title="UseNormalMap堆状态">]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>End&amp;Start</title>
    <link href="/2024/02/23/End-Start/"/>
    <url>/2024/02/23/End-Start/</url>
    
    <content type="html"><![CDATA[<h1 id="End-Start"><a href="#End-Start" class="headerlink" title="End&amp;Start"></a>End&amp;Start</h1><p>立个 flag：这个周末写点东西～</p>]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hello-world</title>
    <link href="/2024/01/25/hello-world/"/>
    <url>/2024/01/25/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Hyphen"><a href="#Hyphen" class="headerlink" title="Hyphen"></a>Hyphen</h1><p>This is a Hello World page</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello Wolrd!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>tech</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>我或许曾用八千里寻找过六便士</title>
    <link href="/2018/06/08/i-am-not-hyphen/"/>
    <url>/2018/06/08/i-am-not-hyphen/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="39da632d956177af7679eb126f4ec9405a6cf3061416e7daae098a24f8ffb12c">e32ff89d1b75ae8a97b4d649089b0415557849d44d6f7d9231c9cc4194694996d5ffb56f88514fc37a666ae1ee3537ad0b0eb49dc733eb8ffe36abffef3d01012ae839199a80a6bda9cdc0548d9c0426f3b645819a06a3e2f4803c614574e8e27f0da767598ca84398786da6fc1c140b9a01b2e34253fd94f6094c4952073f1578019edb66240d331083bebbd77d8331fd50a1624a2e2a42a2ac0d0183543a719e420b95ea5934eacb2e74ebf1d5bf4a863da78759dfe97e4bdd1d525c3b8ab92a555f88efbb034d3ae9b823404d1027f0c2b221d1633abbf389134883ab8b36a4b04fef81a27b355f6af5edec6f75e82215b03bce4fb099cc0080ae9ff7fc31f7336e1b2ea4956e06d0fe7d1c5e1339ba5d58f3fb2df896f51f361dcd5bfbb7e737d559e359d97430f7a04d1b9c06e6f4fde9920f4d6127606fff72823ac5040c432ca222bce5a3ce7860c1b04953b7019c952abfe7530db622a8404e00d4afcb74600cb3c1be5d80cb7ef03ba6f17bae4889da2ebb95e45ff4d6a184e7a210ddf9eb2b49b15a5be001a1e52808f04a870969ae9aa398e7826ce698f8f48e768db36b79cbf15a476ec38b71814b64b15ad427ae12b8788ab0d75d4490b06de467bd0e4283963684fbb351a9bf68043d247d43ff677a30305dfdc285a8481b839380714fbbabc0b8a2290b96f4743834c931be424ca7c36d2c470a6ebcb80dade9aa95958a7665cf1be234b2c8f8941c3a87256d58bb0cbaa84d33665c088afa6ff6d49e46bbaed3866fe9483473c012d4106ca624efdf91ed688450a407b71acc0e8ea513e0ff4e574426c8386762a2db24feb41cabda4834bb08e2737f658643b17725545b41b3896979a775322491cef7bcf8d78d6ac2548d4c8200b3228258d708a926fda1dfa262b4e9dca70aac2c772c291c1d66571b11f4b54456b7a4fcd220e77eace89aa4f6c4f01130aa030b453e7c1848fd0bc25918b02939486b38db047dd05ae39d143a0cc852819321f9aea24ff22ff9a6b10c6b20f5a68ec36458a14be287be2d527fa2c112231c23fc3508a60cd0e8d676fd0ac012449246feb290115c054e418bcb3ccfeee180b8535a809347c20346822702b9e2929141e5454cdc36adafa8080f73174428feecf75901831c22864da3ea344155550ddc4d348f3a7f9e3cb440e94e1ade6cf3171f6bd394cf61c24ec7633957bdb049fb94d818d99022279e81416292cdcb809be94fdf6a16b32bc5f8b527291bf1b7502e322889fa0d61e1c3493ef4cdfba86bb9596b3f60d594211a6e30942941834cf036940e8ef5a44f16ff4b3900773c47451a59deaaaaf18bb81690999fd2a74340a6f8107ce07d166230b73a02b3d66ce32c5e726211bf81b011237e529d2fd1ddf7981ef7e77d71a04db771ee5739402f5b1115a6db8fcc36b52ff812d7c4d279b88c661343275741c83a83a1c20a7db8d9882d9ebcc00313c34c8f2d089471085a056fc2e319e0991c60a7a6f54e6351b76c7aed69b8daa38410573ec48db9870d15223f2b66118b8402d1473874d7d484ec28f0fe36b0c1cfd5fe3491bc0bcaf732743c548b5f496ea46b4a8f7a18f4a2876a7c96cc362fe82e82a915531de473a36342d1ceb92c3ac8b84c9b81106932e3461a92da238b286672dc58571ddc083f9132036b2659d885c3f1f00eeb03e998caa5840982fae89db52b01e9c0765a0ca06712ea91a46d0b92aa40eb50125498f4f164a8883e1887c096af92a731d5ecfc72f5af47e91e0037abdba4389322ae7297bf09a470d4dae1a1e4989b28a929a21fbcb755ca78981988bc0ca2c993ffefc46fab31ee1f222a34ae12acb8fbaecd6109d25be22ee752bc5e9399fb29a8b6fdff56451aa55d278a0ac09cfe0ec0400084bd1ff1d85039e89c0cc0456856d6375652e197b8755755f47d1fd9e78e1a4bbcc1e4cbd3cad36ff1955e09fb1a30a4eb193c6db355a0045e4f57bbb5fc2272d93483567067934f94a0b582560634e588737052904fe05be56978adf20de77dc165c1a9efc611827ed15523b13742bf1e62327a002b61aa5760903d790c8f915d2bc23526dd4d7e6fe84f8cf34653f49c41c5cbc80fab227d3521baa753af3da5e1a2fb585d3ddd05291e2cdddf59e8799ff901749e8e96ce45e23739888779f0351fd067318e1138844aed94871da077504ad52caab10afea6103cd0cc2a663780f730eb55f39db16fa0342fa36663502c4739457b85b98f3e3e5b0ca6b6537d82a6f4d6d7675a74e0afe269050dac2eddf194d51026c86ea8f4254a1b3887beb28c5d05beaa22dcdba4d24430ddb3ba88f86816564e75c5cbfd5dcb7a8ed5596f65f45185ae4754c93b0032f809506a1db2bede5bfcde1adcc3d7ce9410013bd8141a1037a0812456e53ed6927f0208bd03aeb07f215bc84fddd5ace2c5b8f78f6d1a3a1a4b568206404503751c5cf87b6c3be97957229b0adfe4b77846e61b794efb2a179d9e5e52d38ef94c769e05e20e8bb2e6338b9a0a99b7f1ab6c38db8b910b64b1497398379d94c5e4b3b6122192b3df21a22b360e42edcc06b5786af351f055685d76fee5c0fb9a2a81e5223ec03d7dc91365d4fcf8443b7d7b759436a19e864517aa2d259821b2d86ee2b066b9af8fdca040308d7a7efab981ae51156fc5e66cfe113de520f532534a66975aba6e79267d4eca712ab6ea8c237a74ce7d15c801a5626d8fc5c75a1cce3b77d1d450e08e436a3f9a3d4acb02ac0edf22f5c833fd631213c8324c86746d46b949019e290a6d7b966c39a9a985717d32497499776a0fdb211489d534a09cddfd1af51b02b35237de1cfb231c2a92982f93a4e090250fc12142f4ac845fa3a04a1f270611d524b9b4e7c7b3d75a3d968730da523ece272a2265556b351aaa29296f5a4c2e9564e8d31899e5402480e6286eb412c8748b0309758338b73733757e6943940afe5f3c7042da3d4d4cbb48123f37133cdc0ad03bc63fee976ea95bfde3586c3dd3ee0e429af87fe16f84efb28afe18d571eb9e1d4b105d12a3504fb8081c2fcfa23286491e83af4f52b243b6aeca22e4a2436b125507f38f53f3943b3959929d54167e1a4870c15cbef691f8995a8a43f85ecc6b6f663a25c6b7c1e2cd0f451071582f09040907250654ae99d0e536ea747aa0aeba0a76d9538591b024e8d1448646bd68d13762550ea1a38e7dd0e90120ed32ee1ec2846a64348bef07638cff503919d35695af84d0d50810e3c96fad25a2dad72a439b01639fcc11246cb8deeb8da278e1f0bc678d8af6532678ff137a28ff1fb5abdcdafc8a28c57d17c040a5f5090fd45c82f53efce58f0a7d6617893df2fc9670e330932ccd960d12a3496a7ba7aa532522c5f6e3eea44812c9cebb023bb7156aaf77f9478e769bc86b60b018802d45b3f6e095891c3fc49eca5bc83668f20321c84a798265d657c2b293d91e2379670fe10eb1280120f32327dd00062afcc1b1c9ef1b7ce8b0e39be900481b2db5730475c0c3bd54ef74fd40c98a35831517310ba961fd123f30f15c51cf954fc1273c926fbd3c12f354a88d8a9738d5f4e4e03964ed4c2e46d745510f89ba134b5b5fb4301203f4bbb92178e43decdac2e35955ab1f2a166dc2ce6f01dea49da55680d03523f3f21c8e8051b7eaa9a71a89ae43db94ad9cc9c687037cc9fd0a03bdb5655595bd41f78eeb4b74d95dcd3417522d0cfaf89d31e02505498f5b42999ec1f1303d12ee30387badf2445ba93f0ee866ae67319aecbc3df3b963fc74e09bc360cda54188b215d2394399cde79f7e3e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-blink">      <input class="hbe hbe-input-field hbe-input-field-blink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-blink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-blink" data-content="密码是「我不管」下一句的拼音">密码是「我不管」下一句的拼音</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>daily</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
